
node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006908  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006aa8  08006aa8  00016aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd4  08006bd4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bdc  08006bdc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006be0  08006be0  00016be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000074  08006c58  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08006c58  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002473  00000000  00000000  0003244b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  000348c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000358f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188b5  00000000  00000000  00036838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123e7  00000000  00000000  0004f0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c42f  00000000  00000000  000614d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004990  00000000  00000000  000fd954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a90 	.word	0x08006a90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006a90 	.word	0x08006a90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b974 	b.w	8000d7c <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9d08      	ldr	r5, [sp, #32]
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	468e      	mov	lr, r1
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d14d      	bne.n	8000b56 <__udivmoddi4+0xaa>
 8000aba:	428a      	cmp	r2, r1
 8000abc:	4694      	mov	ip, r2
 8000abe:	d969      	bls.n	8000b94 <__udivmoddi4+0xe8>
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	b152      	cbz	r2, 8000adc <__udivmoddi4+0x30>
 8000ac6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aca:	f1c2 0120 	rsb	r1, r2, #32
 8000ace:	fa20 f101 	lsr.w	r1, r0, r1
 8000ad2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad6:	ea41 0e03 	orr.w	lr, r1, r3
 8000ada:	4094      	lsls	r4, r2
 8000adc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae0:	0c21      	lsrs	r1, r4, #16
 8000ae2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ae6:	fa1f f78c 	uxth.w	r7, ip
 8000aea:	fb08 e316 	mls	r3, r8, r6, lr
 8000aee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000af2:	fb06 f107 	mul.w	r1, r6, r7
 8000af6:	4299      	cmp	r1, r3
 8000af8:	d90a      	bls.n	8000b10 <__udivmoddi4+0x64>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b02:	f080 811f 	bcs.w	8000d44 <__udivmoddi4+0x298>
 8000b06:	4299      	cmp	r1, r3
 8000b08:	f240 811c 	bls.w	8000d44 <__udivmoddi4+0x298>
 8000b0c:	3e02      	subs	r6, #2
 8000b0e:	4463      	add	r3, ip
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b20:	fb00 f707 	mul.w	r7, r0, r7
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x92>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	f080 810a 	bcs.w	8000d48 <__udivmoddi4+0x29c>
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	f240 8107 	bls.w	8000d48 <__udivmoddi4+0x29c>
 8000b3a:	4464      	add	r4, ip
 8000b3c:	3802      	subs	r0, #2
 8000b3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b42:	1be4      	subs	r4, r4, r7
 8000b44:	2600      	movs	r6, #0
 8000b46:	b11d      	cbz	r5, 8000b50 <__udivmoddi4+0xa4>
 8000b48:	40d4      	lsrs	r4, r2
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d909      	bls.n	8000b6e <__udivmoddi4+0xc2>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	f000 80ef 	beq.w	8000d3e <__udivmoddi4+0x292>
 8000b60:	2600      	movs	r6, #0
 8000b62:	e9c5 0100 	strd	r0, r1, [r5]
 8000b66:	4630      	mov	r0, r6
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	fab3 f683 	clz	r6, r3
 8000b72:	2e00      	cmp	r6, #0
 8000b74:	d14a      	bne.n	8000c0c <__udivmoddi4+0x160>
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d302      	bcc.n	8000b80 <__udivmoddi4+0xd4>
 8000b7a:	4282      	cmp	r2, r0
 8000b7c:	f200 80f9 	bhi.w	8000d72 <__udivmoddi4+0x2c6>
 8000b80:	1a84      	subs	r4, r0, r2
 8000b82:	eb61 0303 	sbc.w	r3, r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	469e      	mov	lr, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d0e0      	beq.n	8000b50 <__udivmoddi4+0xa4>
 8000b8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b92:	e7dd      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000b94:	b902      	cbnz	r2, 8000b98 <__udivmoddi4+0xec>
 8000b96:	deff      	udf	#255	; 0xff
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	2a00      	cmp	r2, #0
 8000b9e:	f040 8092 	bne.w	8000cc6 <__udivmoddi4+0x21a>
 8000ba2:	eba1 010c 	sub.w	r1, r1, ip
 8000ba6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000baa:	fa1f fe8c 	uxth.w	lr, ip
 8000bae:	2601      	movs	r6, #1
 8000bb0:	0c20      	lsrs	r0, r4, #16
 8000bb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bbe:	fb0e f003 	mul.w	r0, lr, r3
 8000bc2:	4288      	cmp	r0, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x12c>
 8000bc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x12a>
 8000bd0:	4288      	cmp	r0, r1
 8000bd2:	f200 80cb 	bhi.w	8000d6c <__udivmoddi4+0x2c0>
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000be0:	fb07 1110 	mls	r1, r7, r0, r1
 8000be4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000be8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bec:	45a6      	cmp	lr, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x156>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf8:	d202      	bcs.n	8000c00 <__udivmoddi4+0x154>
 8000bfa:	45a6      	cmp	lr, r4
 8000bfc:	f200 80bb 	bhi.w	8000d76 <__udivmoddi4+0x2ca>
 8000c00:	4608      	mov	r0, r1
 8000c02:	eba4 040e 	sub.w	r4, r4, lr
 8000c06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c0a:	e79c      	b.n	8000b46 <__udivmoddi4+0x9a>
 8000c0c:	f1c6 0720 	rsb	r7, r6, #32
 8000c10:	40b3      	lsls	r3, r6
 8000c12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c22:	431c      	orrs	r4, r3
 8000c24:	40f9      	lsrs	r1, r7
 8000c26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c32:	0c20      	lsrs	r0, r4, #16
 8000c34:	fa1f fe8c 	uxth.w	lr, ip
 8000c38:	fb09 1118 	mls	r1, r9, r8, r1
 8000c3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c40:	fb08 f00e 	mul.w	r0, r8, lr
 8000c44:	4288      	cmp	r0, r1
 8000c46:	fa02 f206 	lsl.w	r2, r2, r6
 8000c4a:	d90b      	bls.n	8000c64 <__udivmoddi4+0x1b8>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c54:	f080 8088 	bcs.w	8000d68 <__udivmoddi4+0x2bc>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f240 8085 	bls.w	8000d68 <__udivmoddi4+0x2bc>
 8000c5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c62:	4461      	add	r1, ip
 8000c64:	1a09      	subs	r1, r1, r0
 8000c66:	b2a4      	uxth	r4, r4
 8000c68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c78:	458e      	cmp	lr, r1
 8000c7a:	d908      	bls.n	8000c8e <__udivmoddi4+0x1e2>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c84:	d26c      	bcs.n	8000d60 <__udivmoddi4+0x2b4>
 8000c86:	458e      	cmp	lr, r1
 8000c88:	d96a      	bls.n	8000d60 <__udivmoddi4+0x2b4>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	4461      	add	r1, ip
 8000c8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c92:	fba0 9402 	umull	r9, r4, r0, r2
 8000c96:	eba1 010e 	sub.w	r1, r1, lr
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	46c8      	mov	r8, r9
 8000c9e:	46a6      	mov	lr, r4
 8000ca0:	d356      	bcc.n	8000d50 <__udivmoddi4+0x2a4>
 8000ca2:	d053      	beq.n	8000d4c <__udivmoddi4+0x2a0>
 8000ca4:	b15d      	cbz	r5, 8000cbe <__udivmoddi4+0x212>
 8000ca6:	ebb3 0208 	subs.w	r2, r3, r8
 8000caa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cae:	fa01 f707 	lsl.w	r7, r1, r7
 8000cb2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cb6:	40f1      	lsrs	r1, r6
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e9c5 7100 	strd	r7, r1, [r5]
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	f1c2 0320 	rsb	r3, r2, #32
 8000cca:	40d8      	lsrs	r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	4301      	orrs	r1, r0
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ce4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ce8:	0c0b      	lsrs	r3, r1, #16
 8000cea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cee:	fb00 f60e 	mul.w	r6, r0, lr
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x260>
 8000cfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d02:	d22f      	bcs.n	8000d64 <__udivmoddi4+0x2b8>
 8000d04:	429e      	cmp	r6, r3
 8000d06:	d92d      	bls.n	8000d64 <__udivmoddi4+0x2b8>
 8000d08:	3802      	subs	r0, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	b289      	uxth	r1, r1
 8000d10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d14:	fb07 3316 	mls	r3, r7, r6, r3
 8000d18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x28a>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d2c:	d216      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d914      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d32:	3e02      	subs	r6, #2
 8000d34:	4461      	add	r1, ip
 8000d36:	1ac9      	subs	r1, r1, r3
 8000d38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d3c:	e738      	b.n	8000bb0 <__udivmoddi4+0x104>
 8000d3e:	462e      	mov	r6, r5
 8000d40:	4628      	mov	r0, r5
 8000d42:	e705      	b.n	8000b50 <__udivmoddi4+0xa4>
 8000d44:	4606      	mov	r6, r0
 8000d46:	e6e3      	b.n	8000b10 <__udivmoddi4+0x64>
 8000d48:	4618      	mov	r0, r3
 8000d4a:	e6f8      	b.n	8000b3e <__udivmoddi4+0x92>
 8000d4c:	454b      	cmp	r3, r9
 8000d4e:	d2a9      	bcs.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d50:	ebb9 0802 	subs.w	r8, r9, r2
 8000d54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d58:	3801      	subs	r0, #1
 8000d5a:	e7a3      	b.n	8000ca4 <__udivmoddi4+0x1f8>
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	e7ea      	b.n	8000d36 <__udivmoddi4+0x28a>
 8000d60:	4620      	mov	r0, r4
 8000d62:	e794      	b.n	8000c8e <__udivmoddi4+0x1e2>
 8000d64:	4640      	mov	r0, r8
 8000d66:	e7d1      	b.n	8000d0c <__udivmoddi4+0x260>
 8000d68:	46d0      	mov	r8, sl
 8000d6a:	e77b      	b.n	8000c64 <__udivmoddi4+0x1b8>
 8000d6c:	3b02      	subs	r3, #2
 8000d6e:	4461      	add	r1, ip
 8000d70:	e732      	b.n	8000bd8 <__udivmoddi4+0x12c>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e709      	b.n	8000b8a <__udivmoddi4+0xde>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	e742      	b.n	8000c02 <__udivmoddi4+0x156>

08000d7c <__aeabi_idiv0>:
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

// Over riding the call back handler

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

	if(htim==&htim10){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d11c      	bne.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x4a>
//		(Pulse frequency x 60 min) / 7.5Q = flow rate in L/hour
		FLOWRATE=FLOW_PULSE_COUNT*60/7.5;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	1a9b      	subs	r3, r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fbc9 	bl	8000534 <__aeabi_i2d>
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000da8:	f7ff fd58 	bl	800085c <__aeabi_ddiv>
 8000dac:	4602      	mov	r2, r0
 8000dae:	460b      	mov	r3, r1
 8000db0:	4610      	mov	r0, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f7ff fe3a 	bl	8000a2c <__aeabi_d2iz>
 8000db8:	4603      	mov	r3, r0
 8000dba:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dbc:	6013      	str	r3, [r2, #0]
		FLOW_PULSE_COUNT=0;
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
		FLOWRATE_update=1;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]
	}

 if(htim==&htim2) // 1 sec delay
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d105      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x5e>
 {
  NODE_RECEIVE = 0;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Stop(&htim2);
 8000dd8:	480d      	ldr	r0, [pc, #52]	; (8000e10 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000dda:	f003 ff1e 	bl	8004c1a <HAL_TIM_Base_Stop>
 }

 if(htim==&htim5)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d105      	bne.n	8000df2 <HAL_TIM_PeriodElapsedCallback+0x72>
 {
  NODE_TRANSMIT = 1;  //NODE_RECEIVE = 0 already
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Stop(&htim5);
 8000dec:	480a      	ldr	r0, [pc, #40]	; (8000e18 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000dee:	f003 ff14 	bl	8004c1a <HAL_TIM_Base_Stop>

 }



 }
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000208 	.word	0x20000208
 8000e00:	20000298 	.word	0x20000298
 8000e04:	401e0000 	.word	0x401e0000
 8000e08:	2000029c 	.word	0x2000029c
 8000e0c:	200002a0 	.word	0x200002a0
 8000e10:	20000130 	.word	0x20000130
 8000e14:	20000296 	.word	0x20000296
 8000e18:	200001c0 	.word	0x200001c0
 8000e1c:	20000000 	.word	0x20000000

08000e20 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]


  char printbuffer[40] = {0};
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2224      	movs	r2, #36	; 0x24
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f005 f9a0 	bl	800617c <memset>
  if (GPIO_Pin == FlwSensr_Pin){
 8000e3c:	88fb      	ldrh	r3, [r7, #6]
 8000e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e42:	d104      	bne.n	8000e4e <HAL_GPIO_EXTI_Callback+0x2e>

	  FLOW_PULSE_COUNT++;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a11      	ldr	r2, [pc, #68]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x70>)
 8000e4c:	6013      	str	r3, [r2, #0]
  }

  if (GPIO_Pin == dio_lora_pb2_Pin)
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d102      	bne.n	8000e5a <HAL_GPIO_EXTI_Callback+0x3a>
  {
    LORA_RECEIVED_SOMETHING = 1;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]
#ifdef RECEIVE
// snprintf(printbuffer,sizeof(printbuffer),"\nReceived something");
#endif
  }
  if (GPIO_Pin == B1_Pin)
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e60:	d111      	bne.n	8000e86 <HAL_GPIO_EXTI_Callback+0x66>
  {
    snprintf(printbuffer, sizeof(printbuffer), "\nSomebody pressed the BLUE button!!");
 8000e62:	f107 0308 	add.w	r3, r7, #8
 8000e66:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <HAL_GPIO_EXTI_Callback+0x78>)
 8000e68:	2128      	movs	r1, #40	; 0x28
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f005 f98e 	bl	800618c <sniprintf>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000e70:	2120      	movs	r1, #32
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000e74:	f002 fc01 	bl	800367a <HAL_GPIO_TogglePin>
    HAL_UART_Transmit(&huart2, (uint8_t *)printbuffer, 40, 50);
 8000e78:	f107 0108 	add.w	r1, r7, #8
 8000e7c:	2332      	movs	r3, #50	; 0x32
 8000e7e:	2228      	movs	r2, #40	; 0x28
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000e82:	f004 fddc 	bl	8005a3e <HAL_UART_Transmit>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3730      	adds	r7, #48	; 0x30
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000298 	.word	0x20000298
 8000e94:	20000294 	.word	0x20000294
 8000e98:	08006aa8 	.word	0x08006aa8
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	20000250 	.word	0x20000250

08000ea4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  ADC_CONVERTED = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000295 	.word	0x20000295

08000ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec4:	b5b0      	push	{r4, r5, r7, lr}
 8000ec6:	b0b8      	sub	sp, #224	; 0xe0
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char x = 'x', newline = '\n', temp;
 8000eca:	2378      	movs	r3, #120	; 0x78
 8000ecc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
  char receivedval = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
  unsigned int status, i, rssi, lora_connect;
  char buffer[BUFF_SIZE] = {0};
 8000edc:	2300      	movs	r3, #0
 8000ede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000ee2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ee6:	222e      	movs	r2, #46	; 0x2e
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 f946 	bl	800617c <memset>
  uint8_t airquality_input = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
  uint8_t send_data[MESSAGESIZE];
  uint8_t received_data[MESSAGESIZE];
  uint8_t packet_size = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  uint16_t adc_value = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
  MSGrcv msg_rcv;
  MSGsend msg_snd;
  LoRa myLoRa;
  float waterflowed=0.0;//,*tempfloatptr,tempfloat;
 8000f02:	f04f 0300 	mov.w	r3, #0
 8000f06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0a:	f001 fbfd 	bl	8002708 <HAL_Init>

  /* USER CODE BEGIN Init */

  // LORA SETTINGS
  myLoRa = newLoRa(); // sets frequency spreading factor to default value
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 f836 	bl	8001f82 <newLoRa>
 8000f16:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000f1a:	463d      	mov	r5, r7
 8000f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myLoRa.CS_pin = cs_lora_pb0_Pin;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	86bb      	strh	r3, [r7, #52]	; 0x34
  myLoRa.CS_port = cs_lora_pb0_GPIO_Port;
 8000f30:	4bc9      	ldr	r3, [pc, #804]	; (8001258 <main+0x394>)
 8000f32:	633b      	str	r3, [r7, #48]	; 0x30
  myLoRa.reset_pin = reset_lora_pb1_Pin;
 8000f34:	2302      	movs	r3, #2
 8000f36:	87bb      	strh	r3, [r7, #60]	; 0x3c
  myLoRa.reset_port = reset_lora_pb1_GPIO_Port;
 8000f38:	4bc7      	ldr	r3, [pc, #796]	; (8001258 <main+0x394>)
 8000f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  myLoRa.DIO0_port = dio_lora_pb2_GPIO_Port;
 8000f3c:	4bc6      	ldr	r3, [pc, #792]	; (8001258 <main+0x394>)
 8000f3e:	643b      	str	r3, [r7, #64]	; 0x40
  myLoRa.DIO0_pin = dio_lora_pb2_Pin;
 8000f40:	2304      	movs	r3, #4
 8000f42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  myLoRa.hSPIx = &hspi2;
 8000f46:	4bc5      	ldr	r3, [pc, #788]	; (800125c <main+0x398>)
 8000f48:	64bb      	str	r3, [r7, #72]	; 0x48

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f9b1 	bl	80012b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 fc09 	bl	8001764 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fbdd 	bl	8001710 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f56:	f000 fa69 	bl	800142c <MX_SPI2_Init>
  MX_ADC1_Init();
 8000f5a:	f000 fa15 	bl	8001388 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f5e:	f000 fae9 	bl	8001534 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f62:	f000 fa99 	bl	8001498 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f66:	f000 fb5d 	bl	8001624 <MX_TIM5_Init>
  MX_TIM10_Init();
 8000f6a:	f000 fbab 	bl	80016c4 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  //  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);

  // start adc conversion through interrupt (air quality)
  HAL_ADC_Start_IT(&hadc1);
 8000f6e:	48bc      	ldr	r0, [pc, #752]	; (8001260 <main+0x39c>)
 8000f70:	f001 fca4 	bl	80028bc <HAL_ADC_Start_IT>

  // check lora
  lora_connect = LoRa_init(&myLoRa);
 8000f74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 fb21 	bl	80025c0 <LoRa_init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  // CHECK LORA STATUS
  if (lora_connect == LORA_OK)
 8000f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f88:	2bc8      	cmp	r3, #200	; 0xc8
 8000f8a:	d10f      	bne.n	8000fac <main+0xe8>
  {
    sniprintf(buffer, BUFF_SIZE, "Lora connected...status= %d\n", lora_connect);
 8000f8c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8000f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8000f94:	4ab3      	ldr	r2, [pc, #716]	; (8001264 <main+0x3a0>)
 8000f96:	2132      	movs	r1, #50	; 0x32
 8000f98:	f005 f8f8 	bl	800618c <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(buffer), 100);
 8000f9c:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000fa0:	2364      	movs	r3, #100	; 0x64
 8000fa2:	2232      	movs	r2, #50	; 0x32
 8000fa4:	48b0      	ldr	r0, [pc, #704]	; (8001268 <main+0x3a4>)
 8000fa6:	f004 fd4a 	bl	8005a3e <HAL_UART_Transmit>
 8000faa:	e018      	b.n	8000fde <main+0x11a>
  }
  else
    while (1)
    {
      sniprintf(buffer, BUFF_SIZE, "\n LORA NOT CONNECTED");
 8000fac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fb0:	4aae      	ldr	r2, [pc, #696]	; (800126c <main+0x3a8>)
 8000fb2:	2132      	movs	r1, #50	; 0x32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f005 f8e9 	bl	800618c <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000fba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f90e 	bl	80001e0 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8000fcc:	2364      	movs	r3, #100	; 0x64
 8000fce:	48a6      	ldr	r0, [pc, #664]	; (8001268 <main+0x3a4>)
 8000fd0:	f004 fd35 	bl	8005a3e <HAL_UART_Transmit>
      HAL_Delay(1500);
 8000fd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000fd8:	f001 fc08 	bl	80027ec <HAL_Delay>
      sniprintf(buffer, BUFF_SIZE, "\n LORA NOT CONNECTED");
 8000fdc:	e7e6      	b.n	8000fac <main+0xe8>

  while (1)
  {

    /// non tx rx stufff
	 if(FLOWRATE_update)
 8000fde:	4ba4      	ldr	r3, [pc, #656]	; (8001270 <main+0x3ac>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d012      	beq.n	800100e <main+0x14a>
		 waterflowed+=FLOWRATE/(3600); // FLOWRATE is in L/hour
 8000fe8:	4ba2      	ldr	r3, [pc, #648]	; (8001274 <main+0x3b0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4aa2      	ldr	r2, [pc, #648]	; (8001278 <main+0x3b4>)
 8000fee:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff2:	441a      	add	r2, r3
 8000ff4:	12d2      	asrs	r2, r2, #11
 8000ff6:	17db      	asrs	r3, r3, #31
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001002:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8001006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100a:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8

    if (ADC_CONVERTED)
 800100e:	4b9b      	ldr	r3, [pc, #620]	; (800127c <main+0x3b8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d013      	beq.n	800103e <main+0x17a>
    {
      ADC_CONVERTED = 0;
 8001016:	4b99      	ldr	r3, [pc, #612]	; (800127c <main+0x3b8>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
      adc_value = HAL_ADC_GetValue(&hadc1);
 800101c:	4890      	ldr	r0, [pc, #576]	; (8001260 <main+0x39c>)
 800101e:	f001 fe1b 	bl	8002c58 <HAL_ADC_GetValue>
 8001022:	4603      	mov	r3, r0
 8001024:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
      HAL_ADC_Start_IT(&hadc1);
 8001028:	488d      	ldr	r0, [pc, #564]	; (8001260 <main+0x39c>)
 800102a:	f001 fc47 	bl	80028bc <HAL_ADC_Start_IT>
      snprintf(buffer, BUFF_SIZE, "\nADC conversion done  %d", adc_value);
 800102e:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8001032:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001036:	4a92      	ldr	r2, [pc, #584]	; (8001280 <main+0x3bc>)
 8001038:	2132      	movs	r1, #50	; 0x32
 800103a:	f005 f8a7 	bl	800618c <sniprintf>
//      HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
    }
    airquality_input = HAL_GPIO_ReadPin(digital_sensor_in_GPIO_Port, digital_sensor_in_Pin);
 800103e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001042:	4890      	ldr	r0, [pc, #576]	; (8001284 <main+0x3c0>)
 8001044:	f002 fae8 	bl	8003618 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
    if (!airquality_input) // sensor has inverse digital logic returns 0 on bad air quality
 800104e:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <main+0x1a4>
    {
      snprintf(buffer, BUFF_SIZE, "\nBAD Airquality %d", airquality_input);
 8001056:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800105a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800105e:	4a8a      	ldr	r2, [pc, #552]	; (8001288 <main+0x3c4>)
 8001060:	2132      	movs	r1, #50	; 0x32
 8001062:	f005 f893 	bl	800618c <sniprintf>
 8001066:	e007      	b.n	8001078 <main+0x1b4>
//      HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
    }
    else
    {
      snprintf(buffer, BUFF_SIZE, "\nGood Airquality %d", airquality_input);
 8001068:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 800106c:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001070:	4a86      	ldr	r2, [pc, #536]	; (800128c <main+0x3c8>)
 8001072:	2132      	movs	r1, #50	; 0x32
 8001074:	f005 f88a 	bl	800618c <sniprintf>

    /// end of  non tx rx stufff



    if (NODE_TRANSMIT)
 8001078:	4b85      	ldr	r3, [pc, #532]	; (8001290 <main+0x3cc>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d056      	beq.n	800112e <main+0x26a>
    {

    	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2120      	movs	r1, #32
 8001084:	487f      	ldr	r0, [pc, #508]	; (8001284 <main+0x3c0>)
 8001086:	f002 fadf 	bl	8003648 <HAL_GPIO_WritePin>
#ifdef TRANSMIT
      msg_snd.ID = SENDTO_ID; // TODO
 800108a:	23ac      	movs	r3, #172	; 0xac
 800108c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
      msg_snd.digital = airquality_input ? 0x01 : 0x00;
 8001090:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf14      	ite	ne
 8001098:	2301      	movne	r3, #1
 800109a:	2300      	moveq	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      msg_snd.analog_converted = adc_value;
 80010a2:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 80010a6:	663b      	str	r3, [r7, #96]	; 0x60
      msg_snd.waterFlowed=waterflowed;
 80010a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80010ac:	66bb      	str	r3, [r7, #104]	; 0x68
// TO SEE THE LITTLE ENDIANNESS
//      tempcharptr1=&msg_snd.waterFlowed;
//      tempcharptr2=tempcharptr1+1;
//      tempcharptr3=tempcharptr2+1;
//      tempcharptr4=tempcharptr3+1;
      message1_addData(&msg_snd, send_data, MESSAGESIZE);
 80010ae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80010b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80010b6:	220c      	movs	r2, #12
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fc7c 	bl	80019b6 <message1_addData>
//      tempfloatptr=send_data+8;
//      tempfloat=*tempfloatptr;
      status = LoRa_transmit(&myLoRa, send_data, MESSAGESIZE, 50);
 80010be:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80010c2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80010c6:	2332      	movs	r3, #50	; 0x32
 80010c8:	220c      	movs	r2, #12
 80010ca:	f001 f9b5 	bl	8002438 <LoRa_transmit>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      if (status == 1)
 80010d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d11a      	bne.n	8001112 <main+0x24e>
      {
        snprintf(buffer, BUFF_SIZE, "\nTransmitted the message packets :");
 80010dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010e0:	4a6c      	ldr	r2, [pc, #432]	; (8001294 <main+0x3d0>)
 80010e2:	2132      	movs	r1, #50	; 0x32
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 f851 	bl	800618c <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 80010ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f876 	bl	80001e0 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	485a      	ldr	r0, [pc, #360]	; (8001268 <main+0x3a4>)
 8001100:	f004 fc9d 	bl	8005a3e <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t *)send_data, MESSAGESIZE, 100);
 8001104:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	220c      	movs	r2, #12
 800110c:	4856      	ldr	r0, [pc, #344]	; (8001268 <main+0x3a4>)
 800110e:	f004 fc96 	bl	8005a3e <HAL_UART_Transmit>
      }
#endif
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	485b      	ldr	r0, [pc, #364]	; (8001284 <main+0x3c0>)
 8001118:	f002 fa96 	bl	8003648 <HAL_GPIO_WritePin>
      HAL_TIM_Base_Start_IT(&htim2); // start 1 second timer
 800111c:	485e      	ldr	r0, [pc, #376]	; (8001298 <main+0x3d4>)
 800111e:	f003 fda3 	bl	8004c68 <HAL_TIM_Base_Start_IT>
      NODE_RECEIVE=1;
 8001122:	4b5e      	ldr	r3, [pc, #376]	; (800129c <main+0x3d8>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
      NODE_TRANSMIT=0;
 8001128:	4b59      	ldr	r3, [pc, #356]	; (8001290 <main+0x3cc>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
    }


    if (NODE_RECEIVE)
 800112e:	4b5b      	ldr	r3, [pc, #364]	; (800129c <main+0x3d8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f43f af53 	beq.w	8000fde <main+0x11a>
    {
     HAL_GPIO_WritePin(LD3_RX_MODE_GPIO_Port, LD3_RX_MODE_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2140      	movs	r1, #64	; 0x40
 800113c:	4851      	ldr	r0, [pc, #324]	; (8001284 <main+0x3c0>)
 800113e:	f002 fa83 	bl	8003648 <HAL_GPIO_WritePin>
#ifdef RECEIVE
      LoRa_startReceiving(&myLoRa);
 8001142:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001146:	4618      	mov	r0, r3
 8001148:	f001 f9ce 	bl	80024e8 <LoRa_startReceiving>
      while (NODE_RECEIVE){
 800114c:	e06d      	b.n	800122a <main+0x366>
        //	 	if(LORA_RECEIVED_SOMETHING==1)
        packet_size = LoRa_receive(&myLoRa, received_data, BUFF_SIZE);
 800114e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001156:	2232      	movs	r2, #50	; 0x32
 8001158:	4618      	mov	r0, r3
 800115a:	f001 f9d1 	bl	8002500 <LoRa_receive>
 800115e:	4603      	mov	r3, r0
 8001160:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

        // use the recived data for something
         if (packet_size == 12){
 8001164:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d158      	bne.n	800121e <main+0x35a>
           snprintf(buffer, BUFF_SIZE, "\nReceived %d bytes", packet_size);
 800116c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8001170:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8001174:	4a4a      	ldr	r2, [pc, #296]	; (80012a0 <main+0x3dc>)
 8001176:	2132      	movs	r1, #50	; 0x32
 8001178:	f005 f808 	bl	800618c <sniprintf>
           HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 800117c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f82d 	bl	80001e0 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	4835      	ldr	r0, [pc, #212]	; (8001268 <main+0x3a4>)
 8001192:	f004 fc54 	bl	8005a3e <HAL_UART_Transmit>
           message1_getData(&msg_rcv, received_data, packet_size);
 8001196:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800119a:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 800119e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fbb9 	bl	800191a <message1_getData>
           snprintf(buffer, BUFF_SIZE, "\nID=%c", msg_rcv.ID);
 80011a8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80011ac:	f107 0094 	add.w	r0, r7, #148	; 0x94
 80011b0:	4a3c      	ldr	r2, [pc, #240]	; (80012a4 <main+0x3e0>)
 80011b2:	2132      	movs	r1, #50	; 0x32
 80011b4:	f004 ffea 	bl	800618c <sniprintf>
           HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 80011b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f80f 	bl	80001e0 <strlen>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f107 0194 	add.w	r1, r7, #148	; 0x94
 80011ca:	2364      	movs	r3, #100	; 0x64
 80011cc:	4826      	ldr	r0, [pc, #152]	; (8001268 <main+0x3a4>)
 80011ce:	f004 fc36 	bl	8005a3e <HAL_UART_Transmit>


           // if(msg_rcv.ID==NODEID)
           if (msg_rcv.digital & DIGITAL_OUT1)
 80011d2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <main+0x328>
             HAL_GPIO_WritePin(digital_actu_out1_GPIO_Port, digital_actu_out1_Pin, GPIO_PIN_SET);
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e4:	4830      	ldr	r0, [pc, #192]	; (80012a8 <main+0x3e4>)
 80011e6:	f002 fa2f 	bl	8003648 <HAL_GPIO_WritePin>
 80011ea:	e005      	b.n	80011f8 <main+0x334>
           else
             HAL_GPIO_WritePin(digital_actu_out1_GPIO_Port, digital_actu_out1_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011f2:	482d      	ldr	r0, [pc, #180]	; (80012a8 <main+0x3e4>)
 80011f4:	f002 fa28 	bl	8003648 <HAL_GPIO_WritePin>

           if (msg_rcv.digital & DIGITAL_OUT2)
 80011f8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d006      	beq.n	8001212 <main+0x34e>
             HAL_GPIO_WritePin(digital_actu_out2_GPIO_Port, digital_actu_out2_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800120a:	4827      	ldr	r0, [pc, #156]	; (80012a8 <main+0x3e4>)
 800120c:	f002 fa1c 	bl	8003648 <HAL_GPIO_WritePin>
 8001210:	e005      	b.n	800121e <main+0x35a>
           else
             HAL_GPIO_WritePin(digital_actu_out2_GPIO_Port, digital_actu_out2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001218:	4823      	ldr	r0, [pc, #140]	; (80012a8 <main+0x3e4>)
 800121a:	f002 fa15 	bl	8003648 <HAL_GPIO_WritePin>

         }
         packet_size = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
         HAL_Delay(200);
 8001224:	20c8      	movs	r0, #200	; 0xc8
 8001226:	f001 fae1 	bl	80027ec <HAL_Delay>
      while (NODE_RECEIVE){
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <main+0x3d8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d18d      	bne.n	800114e <main+0x28a>
      }
#endif
  	HAL_GPIO_WritePin(LD3_RX_MODE_GPIO_Port, LD3_RX_MODE_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2140      	movs	r1, #64	; 0x40
 8001236:	4813      	ldr	r0, [pc, #76]	; (8001284 <main+0x3c0>)
 8001238:	f002 fa06 	bl	8003648 <HAL_GPIO_WritePin>
    LoRa_gotoMode(&myLoRa, STNBY_MODE);
 800123c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001240:	2101      	movs	r1, #1
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fec6 	bl	8001fd4 <LoRa_gotoMode>
    NODE_TRANSMIT=0;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <main+0x3cc>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim5); // start 4 second timer
 800124e:	4817      	ldr	r0, [pc, #92]	; (80012ac <main+0x3e8>)
 8001250:	f003 fd0a 	bl	8004c68 <HAL_TIM_Base_Start_IT>
	 if(FLOWRATE_update)
 8001254:	e6c3      	b.n	8000fde <main+0x11a>
 8001256:	bf00      	nop
 8001258:	40020400 	.word	0x40020400
 800125c:	200000d8 	.word	0x200000d8
 8001260:	20000090 	.word	0x20000090
 8001264:	08006acc 	.word	0x08006acc
 8001268:	20000250 	.word	0x20000250
 800126c:	08006aec 	.word	0x08006aec
 8001270:	200002a0 	.word	0x200002a0
 8001274:	2000029c 	.word	0x2000029c
 8001278:	91a2b3c5 	.word	0x91a2b3c5
 800127c:	20000295 	.word	0x20000295
 8001280:	08006b04 	.word	0x08006b04
 8001284:	40020000 	.word	0x40020000
 8001288:	08006b20 	.word	0x08006b20
 800128c:	08006b34 	.word	0x08006b34
 8001290:	20000000 	.word	0x20000000
 8001294:	08006b48 	.word	0x08006b48
 8001298:	20000130 	.word	0x20000130
 800129c:	20000296 	.word	0x20000296
 80012a0:	08006b6c 	.word	0x08006b6c
 80012a4:	08006b80 	.word	0x08006b80
 80012a8:	40020800 	.word	0x40020800
 80012ac:	200001c0 	.word	0x200001c0

080012b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b094      	sub	sp, #80	; 0x50
 80012b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	2230      	movs	r2, #48	; 0x30
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f004 ff5c 	bl	800617c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <SystemClock_Config+0xd0>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <SystemClock_Config+0xd0>)
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <SystemClock_Config+0xd0>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <SystemClock_Config+0xd4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012fc:	4a21      	ldr	r2, [pc, #132]	; (8001384 <SystemClock_Config+0xd4>)
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b1f      	ldr	r3, [pc, #124]	; (8001384 <SystemClock_Config+0xd4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001318:	2310      	movs	r3, #16
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001320:	2300      	movs	r3, #0
 8001322:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001324:	2310      	movs	r3, #16
 8001326:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001328:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800132e:	2304      	movs	r3, #4
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001332:	2307      	movs	r3, #7
 8001334:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001336:	f107 0320 	add.w	r3, r7, #32
 800133a:	4618      	mov	r0, r3
 800133c:	f002 f9d0 	bl	80036e0 <HAL_RCC_OscConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001346:	f000 fae3 	bl	8001910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2302      	movs	r3, #2
 8001350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2102      	movs	r1, #2
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fc32 	bl	8003bd0 <HAL_RCC_ClockConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001372:	f000 facd 	bl	8001910 <Error_Handler>
  }
}
 8001376:	bf00      	nop
 8001378:	3750      	adds	r7, #80	; 0x50
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000

08001388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_ADC1_Init+0x98>)
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <MX_ADC1_Init+0x9c>)
 800139e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_ADC1_Init+0x98>)
 80013a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_ADC1_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_ADC1_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_ADC1_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_ADC1_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_ADC1_Init+0x98>)
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <MX_ADC1_Init+0xa0>)
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_ADC1_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_ADC1_Init+0x98>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_ADC1_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_ADC1_Init+0x98>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_ADC1_Init+0x98>)
 80013ea:	f001 fa23 	bl	8002834 <HAL_ADC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013f4:	f000 fa8c 	bl	8001910 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001400:	2301      	movs	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_ADC1_Init+0x98>)
 800140a:	f001 fc47 	bl	8002c9c <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001414:	f000 fa7c 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000090 	.word	0x20000090
 8001424:	40012000 	.word	0x40012000
 8001428:	0f000001 	.word	0x0f000001

0800142c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <MX_SPI2_Init+0x64>)
 8001432:	4a18      	ldr	r2, [pc, #96]	; (8001494 <MX_SPI2_Init+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <MX_SPI2_Init+0x64>)
 8001438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800143c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <MX_SPI2_Init+0x64>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_SPI2_Init+0x64>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <MX_SPI2_Init+0x64>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001450:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MX_SPI2_Init+0x64>)
 8001452:	2200      	movs	r2, #0
 8001454:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_SPI2_Init+0x64>)
 8001458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800145c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MX_SPI2_Init+0x64>)
 8001460:	2218      	movs	r2, #24
 8001462:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <MX_SPI2_Init+0x64>)
 8001466:	2200      	movs	r2, #0
 8001468:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <MX_SPI2_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <MX_SPI2_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <MX_SPI2_Init+0x64>)
 8001478:	220a      	movs	r2, #10
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_SPI2_Init+0x64>)
 800147e:	f002 fdc7 	bl	8004010 <HAL_SPI_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001488:	f000 fa42 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200000d8 	.word	0x200000d8
 8001494:	40003800 	.word	0x40003800

08001498 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	463b      	mov	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b4:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <MX_TIM2_Init+0x98>)
 80014b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21000-1;
 80014bc:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_TIM2_Init+0x98>)
 80014be:	f245 2207 	movw	r2, #20999	; 0x5207
 80014c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <MX_TIM2_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (rcvtime*4000)-1;
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <MX_TIM2_Init+0x98>)
 80014cc:	f640 729f 	movw	r2, #3999	; 0xf9f
 80014d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80014d2:	4b17      	ldr	r3, [pc, #92]	; (8001530 <MX_TIM2_Init+0x98>)
 80014d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <MX_TIM2_Init+0x98>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	; (8001530 <MX_TIM2_Init+0x98>)
 80014e2:	f003 fb4b 	bl	8004b7c <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014ec:	f000 fa10 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM2_Init+0x98>)
 80014fe:	f003 fe39 	bl	8005174 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001508:	f000 fa02 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM2_Init+0x98>)
 800151a:	f004 f9c1 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001524:	f000 f9f4 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000130 	.word	0x20000130

08001534 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	; 0x38
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]
 8001562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MX_TIM3_Init+0xe8>)
 8001566:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <MX_TIM3_Init+0xec>)
 8001568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <MX_TIM3_Init+0xe8>)
 800156c:	2229      	movs	r2, #41	; 0x29
 800156e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <MX_TIM3_Init+0xe8>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <MX_TIM3_Init+0xe8>)
 8001578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_TIM3_Init+0xe8>)
 8001580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <MX_TIM3_Init+0xe8>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800158c:	4823      	ldr	r0, [pc, #140]	; (800161c <MX_TIM3_Init+0xe8>)
 800158e:	f003 faf5 	bl	8004b7c <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001598:	f000 f9ba 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	4619      	mov	r1, r3
 80015a8:	481c      	ldr	r0, [pc, #112]	; (800161c <MX_TIM3_Init+0xe8>)
 80015aa:	f003 fde3 	bl	8005174 <HAL_TIM_ConfigClockSource>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015b4:	f000 f9ac 	bl	8001910 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015b8:	4818      	ldr	r0, [pc, #96]	; (800161c <MX_TIM3_Init+0xe8>)
 80015ba:	f003 fbb7 	bl	8004d2c <HAL_TIM_PWM_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015c4:	f000 f9a4 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d0:	f107 0320 	add.w	r3, r7, #32
 80015d4:	4619      	mov	r1, r3
 80015d6:	4811      	ldr	r0, [pc, #68]	; (800161c <MX_TIM3_Init+0xe8>)
 80015d8:	f004 f962 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015e2:	f000 f995 	bl	8001910 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e6:	2360      	movs	r3, #96	; 0x60
 80015e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 32767;
 80015ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80015ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	2200      	movs	r2, #0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4807      	ldr	r0, [pc, #28]	; (800161c <MX_TIM3_Init+0xe8>)
 8001600:	f003 fcf6 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800160a:	f000 f981 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <MX_TIM3_Init+0xe8>)
 8001610:	f000 fb62 	bl	8001cd8 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000178 	.word	0x20000178
 8001620:	40000400 	.word	0x40000400

08001624 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_TIM5_Init+0x98>)
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <MX_TIM5_Init+0x9c>)
 8001644:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 21000-1;
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_TIM5_Init+0x98>)
 8001648:	f245 2207 	movw	r2, #20999	; 0x5207
 800164c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_TIM5_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = (sleeptime*4000)-1;
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_TIM5_Init+0x98>)
 8001656:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800165a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_TIM5_Init+0x98>)
 800165e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001662:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_TIM5_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <MX_TIM5_Init+0x98>)
 800166c:	f003 fa86 	bl	8004b7c <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001676:	f000 f94b 	bl	8001910 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <MX_TIM5_Init+0x98>)
 8001688:	f003 fd74 	bl	8005174 <HAL_TIM_ConfigClockSource>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001692:	f000 f93d 	bl	8001910 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_TIM5_Init+0x98>)
 80016a4:	f004 f8fc 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80016ae:	f000 f92f 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200001c0 	.word	0x200001c0
 80016c0:	40000c00 	.word	0x40000c00

080016c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_TIM10_Init+0x44>)
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <MX_TIM10_Init+0x48>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21000-1;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_TIM10_Init+0x44>)
 80016d0:	f245 2207 	movw	r2, #20999	; 0x5207
 80016d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_TIM10_Init+0x44>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <MX_TIM10_Init+0x44>)
 80016de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80016e4:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_TIM10_Init+0x44>)
 80016e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ea:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_TIM10_Init+0x44>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_TIM10_Init+0x44>)
 80016f4:	f003 fa42 	bl	8004b7c <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 80016fe:	f000 f907 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000208 	.word	0x20000208
 800170c:	40014400 	.word	0x40014400

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f004 f92c 	bl	80059a4 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 f8dd 	bl	8001910 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000250 	.word	0x20000250
 8001760:	40004400 	.word	0x40004400

08001764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b60      	ldr	r3, [pc, #384]	; (8001900 <MX_GPIO_Init+0x19c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <MX_GPIO_Init+0x19c>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b5d      	ldr	r3, [pc, #372]	; (8001900 <MX_GPIO_Init+0x19c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b59      	ldr	r3, [pc, #356]	; (8001900 <MX_GPIO_Init+0x19c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a58      	ldr	r2, [pc, #352]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b56      	ldr	r3, [pc, #344]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b52      	ldr	r3, [pc, #328]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a51      	ldr	r2, [pc, #324]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b48      	ldr	r3, [pc, #288]	; (8001900 <MX_GPIO_Init+0x19c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD3_RX_MODE_Pin, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2160      	movs	r1, #96	; 0x60
 80017ee:	4845      	ldr	r0, [pc, #276]	; (8001904 <MX_GPIO_Init+0x1a0>)
 80017f0:	f001 ff2a 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_lora_pb0_GPIO_Port, cs_lora_pb0_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2101      	movs	r1, #1
 80017f8:	4843      	ldr	r0, [pc, #268]	; (8001908 <MX_GPIO_Init+0x1a4>)
 80017fa:	f001 ff25 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(reset_lora_pb1_GPIO_Port, reset_lora_pb1_Pin, GPIO_PIN_SET);
 80017fe:	2201      	movs	r2, #1
 8001800:	2102      	movs	r1, #2
 8001802:	4841      	ldr	r0, [pc, #260]	; (8001908 <MX_GPIO_Init+0x1a4>)
 8001804:	f001 ff20 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, digital_actu_out1_Pin|digital_actu_out2_Pin, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800180e:	483f      	ldr	r0, [pc, #252]	; (800190c <MX_GPIO_Init+0x1a8>)
 8001810:	f001 ff1a 	bl	8003648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800181a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4838      	ldr	r0, [pc, #224]	; (800190c <MX_GPIO_Init+0x1a8>)
 800182c:	f001 fd70 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_RX_MODE_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_RX_MODE_Pin;
 8001830:	2360      	movs	r3, #96	; 0x60
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	482f      	ldr	r0, [pc, #188]	; (8001904 <MX_GPIO_Init+0x1a0>)
 8001848:	f001 fd62 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : cs_lora_pb0_Pin reset_lora_pb1_Pin */
  GPIO_InitStruct.Pin = cs_lora_pb0_Pin|reset_lora_pb1_Pin;
 800184c:	2303      	movs	r3, #3
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4619      	mov	r1, r3
 8001862:	4829      	ldr	r0, [pc, #164]	; (8001908 <MX_GPIO_Init+0x1a4>)
 8001864:	f001 fd54 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : dio_lora_pb2_Pin */
  GPIO_InitStruct.Pin = dio_lora_pb2_Pin;
 8001868:	2304      	movs	r3, #4
 800186a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800186c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dio_lora_pb2_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4822      	ldr	r0, [pc, #136]	; (8001908 <MX_GPIO_Init+0x1a4>)
 800187e:	f001 fd47 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : FlwSensr_Pin */
  GPIO_InitStruct.Pin = FlwSensr_Pin;
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001888:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800188c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FlwSensr_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	481c      	ldr	r0, [pc, #112]	; (800190c <MX_GPIO_Init+0x1a8>)
 800189a:	f001 fd39 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pin : digital_sensor_in_Pin */
  GPIO_InitStruct.Pin = digital_sensor_in_Pin;
 800189e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(digital_sensor_in_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4814      	ldr	r0, [pc, #80]	; (8001904 <MX_GPIO_Init+0x1a0>)
 80018b4:	f001 fd2c 	bl	8003310 <HAL_GPIO_Init>

  /*Configure GPIO pins : digital_actu_out1_Pin digital_actu_out2_Pin */
  GPIO_InitStruct.Pin = digital_actu_out1_Pin|digital_actu_out2_Pin;
 80018b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	480e      	ldr	r0, [pc, #56]	; (800190c <MX_GPIO_Init+0x1a8>)
 80018d2:	f001 fd1d 	bl	8003310 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2008      	movs	r0, #8
 80018dc:	f001 fce1 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80018e0:	2008      	movs	r0, #8
 80018e2:	f001 fcfa 	bl	80032da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2028      	movs	r0, #40	; 0x28
 80018ec:	f001 fcd9 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018f0:	2028      	movs	r0, #40	; 0x28
 80018f2:	f001 fcf2 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	40020800 	.word	0x40020800

08001910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001914:	b672      	cpsid	i
}
 8001916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001918:	e7fe      	b.n	8001918 <Error_Handler+0x8>

0800191a <message1_getData>:
 */

#include "message_1.h"

//// this function on receive
message1_getData(MSGrcv* msg,char* databuffer, char size){
 800191a:	b480      	push	{r7}
 800191c:	b087      	sub	sp, #28
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	4613      	mov	r3, r2
 8001926:	71fb      	strb	r3, [r7, #7]
	uint32_t temp;

	if(size == 12)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d13d      	bne.n	80019aa <message1_getData+0x90>
	{
		msg->ID=databuffer[0];
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	781a      	ldrb	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	701a      	strb	r2, [r3, #0]
		msg->digital=databuffer[1];
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	785a      	ldrb	r2, [r3, #1]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	705a      	strb	r2, [r3, #1]

		temp  = (uint32_t)databuffer[5] << 24 ;       //MSB  //reassembling in opposite way
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3305      	adds	r3, #5
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	061b      	lsls	r3, r3, #24
 8001946:	617b      	str	r3, [r7, #20]
		temp |= (uint32_t)databuffer[4] << 16;
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	3304      	adds	r3, #4
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
		temp |= (uint32_t)databuffer[3] << 8;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	3303      	adds	r3, #3
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	021a      	lsls	r2, r3, #8
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
		temp |= (uint32_t)databuffer[2];  ///LSB
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	3302      	adds	r3, #2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

		memcpy(&(msg->analog_converted), &temp, sizeof(float));
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3304      	adds	r3, #4
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	601a      	str	r2, [r3, #0]
//		msg->analog_converted = databuffer[2] <<24 | databuffer[3] <<16 | databuffer[4] <<8 | databuffer[5] ;
		msg->analog[0] = databuffer[6];
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	799a      	ldrb	r2, [r3, #6]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	721a      	strb	r2, [r3, #8]
		msg->analog[1] = databuffer[7];
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	79da      	ldrb	r2, [r3, #7]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	725a      	strb	r2, [r3, #9]
		msg->future[0] = databuffer[8];
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	7a1a      	ldrb	r2, [r3, #8]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	729a      	strb	r2, [r3, #10]
		msg->future[1] = databuffer[9];
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	7a5a      	ldrb	r2, [r3, #9]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	72da      	strb	r2, [r3, #11]
		msg->future[2] = databuffer[10];
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	7a9a      	ldrb	r2, [r3, #10]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	731a      	strb	r2, [r3, #12]
		msg->future[3] = databuffer[11];
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	7ada      	ldrb	r2, [r3, #11]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	735a      	strb	r2, [r3, #13]
	}

}
 80019aa:	bf00      	nop
 80019ac:	371c      	adds	r7, #28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <message1_addData>:



message1_addData(MSGsend* msg,char* databuffer, char size){
 80019b6:	b480      	push	{r7}
 80019b8:	b087      	sub	sp, #28
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71fb      	strb	r3, [r7, #7]
	databuffer[0]=msg->ID;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	701a      	strb	r2, [r3, #0]
	databuffer[1]=msg->digital;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3301      	adds	r3, #1
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	7852      	ldrb	r2, [r2, #1]
 80019d4:	701a      	strb	r2, [r3, #0]
//	databuffer[3] = (((msg->analog_converted & 0x00FF0000) >>24) & 0xFF); // last FF for safety
//	databuffer[4] = (((msg->analog_converted & 0x0000FF00) >>24) & 0xFF); // last FF for safety
//	databuffer[5] = (((msg->analog_converted & 0x000000FF) >>24) & 0xFF); // last FF for safety //LSB
	//msg->analog_converted = databuffer[2] <<24 | databuffer[3] <<16 | databuffer[4] <<8 | databuffer[5] ;

	memcpy((databuffer+2), &(msg->analog_converted), sizeof(float)); // this will put MSB first out
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3302      	adds	r3, #2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	3204      	adds	r2, #4
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	601a      	str	r2, [r3, #0]

	databuffer[6]=msg->future[0];
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3306      	adds	r3, #6
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	7a12      	ldrb	r2, [r2, #8]
 80019ea:	701a      	strb	r2, [r3, #0]
	databuffer[7]=msg->future[1];
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	3307      	adds	r3, #7
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	7a52      	ldrb	r2, [r2, #9]
 80019f4:	701a      	strb	r2, [r3, #0]
//	memcpy((databuffer+2+sizeof(float)+2), &(msg->analog_converted), sizeof(float));

	ptr = (unsigned char *) &msg->waterFlowed;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	330c      	adds	r3, #12
 80019fa:	613b      	str	r3, [r7, #16]
	for (i = 8; i < (8+sizeof(float));i++)
 80019fc:	2308      	movs	r3, #8
 80019fe:	75fb      	strb	r3, [r7, #23]
 8001a00:	e00b      	b.n	8001a1a <message1_addData+0x64>
		databuffer[i]=*(ptr + (i-8));
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	3b08      	subs	r3, #8
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	441a      	add	r2, r3
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	440b      	add	r3, r1
 8001a10:	7812      	ldrb	r2, [r2, #0]
 8001a12:	701a      	strb	r2, [r3, #0]
	for (i = 8; i < (8+sizeof(float));i++)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	3301      	adds	r3, #1
 8001a18:	75fb      	strb	r3, [r7, #23]
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	2b0b      	cmp	r3, #11
 8001a1e:	d9f0      	bls.n	8001a02 <message1_addData+0x4c>
//    databuffer[9]=msg->future[1];
//	databuffer[10]=msg->future[2];
//	databuffer[11]=msg->future[3];


}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a6e:	2007      	movs	r0, #7
 8001a70:	f001 fc0c 	bl	800328c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <HAL_ADC_MspInit+0x8c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12f      	bne.n	8001b02 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_ADC_MspInit+0x90>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a19      	ldr	r2, [pc, #100]	; (8001b10 <HAL_ADC_MspInit+0x90>)
 8001aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_ADC_MspInit+0x90>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <HAL_ADC_MspInit+0x90>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_ADC_MspInit+0x90>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_ADC_MspInit+0x90>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4809      	ldr	r0, [pc, #36]	; (8001b14 <HAL_ADC_MspInit+0x94>)
 8001aee:	f001 fc0f 	bl	8003310 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2012      	movs	r0, #18
 8001af8:	f001 fbd3 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001afc:	2012      	movs	r0, #18
 8001afe:	f001 fbec 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40012000 	.word	0x40012000
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000

08001b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a28      	ldr	r2, [pc, #160]	; (8001bd8 <HAL_SPI_MspInit+0xc0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d14a      	bne.n	8001bd0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_SPI_MspInit+0xc4>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b8e:	230c      	movs	r3, #12
 8001b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b9e:	2305      	movs	r3, #5
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <HAL_SPI_MspInit+0xc8>)
 8001baa:	f001 fbb1 	bl	8003310 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bc0:	2305      	movs	r3, #5
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4806      	ldr	r0, [pc, #24]	; (8001be4 <HAL_SPI_MspInit+0xcc>)
 8001bcc:	f001 fba0 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3728      	adds	r7, #40	; 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40003800 	.word	0x40003800
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020400 	.word	0x40020400

08001be8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf8:	d116      	bne.n	8001c28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2100      	movs	r1, #0
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f001 fb41 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c20:	201c      	movs	r0, #28
 8001c22:	f001 fb5a 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001c26:	e04a      	b.n	8001cbe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_TIM_Base_MspInit+0xe4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d116      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	4a23      	ldr	r2, [pc, #140]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c3c:	f043 0302 	orr.w	r3, r3, #2
 8001c40:	6413      	str	r3, [r2, #64]	; 0x40
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2100      	movs	r1, #0
 8001c52:	201d      	movs	r0, #29
 8001c54:	f001 fb25 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c58:	201d      	movs	r0, #29
 8001c5a:	f001 fb3e 	bl	80032da <HAL_NVIC_EnableIRQ>
}
 8001c5e:	e02e      	b.n	8001cbe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_TIM_Base_MspInit+0xe8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d116      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a15      	ldr	r2, [pc, #84]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2032      	movs	r0, #50	; 0x32
 8001c8c:	f001 fb09 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c90:	2032      	movs	r0, #50	; 0x32
 8001c92:	f001 fb22 	bl	80032da <HAL_NVIC_EnableIRQ>
}
 8001c96:	e012      	b.n	8001cbe <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_TIM_Base_MspInit+0xec>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10d      	bne.n	8001cbe <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_TIM_Base_MspInit+0xe0>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
}
 8001cbe:	bf00      	nop
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40000400 	.word	0x40000400
 8001cd0:	40000c00 	.word	0x40000c00
 8001cd4:	40014400 	.word	0x40014400

08001cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <HAL_TIM_MspPostInit+0x68>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d11d      	bne.n	8001d36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a10      	ldr	r2, [pc, #64]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d04:	f043 0304 	orr.w	r3, r3, #4
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_TIM_MspPostInit+0x6c>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d16:	2340      	movs	r3, #64	; 0x40
 8001d18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_TIM_MspPostInit+0x70>)
 8001d32:	f001 faed 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020800 	.word	0x40020800

08001d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	; 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a19      	ldr	r2, [pc, #100]	; (8001dd0 <HAL_UART_MspInit+0x84>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d12b      	bne.n	8001dc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_UART_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001da6:	230c      	movs	r3, #12
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db6:	2307      	movs	r3, #7
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <HAL_UART_MspInit+0x8c>)
 8001dc2:	f001 faa5 	bl	8003310 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	3728      	adds	r7, #40	; 0x28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40004400 	.word	0x40004400
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e28:	f000 fcc0 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(dio_lora_pb2_Pin);
 8001e34:	2004      	movs	r0, #4
 8001e36:	f001 fc3b 	bl	80036b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <ADC_IRQHandler+0x10>)
 8001e46:	f000 fdf7 	bl	8002a38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000090 	.word	0x20000090

08001e54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM2_IRQHandler+0x10>)
 8001e5a:	f002 ffc0 	bl	8004dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000130 	.word	0x20000130

08001e68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM3_IRQHandler+0x10>)
 8001e6e:	f002 ffb6 	bl	8004dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000178 	.word	0x20000178

08001e7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e84:	f001 fc14 	bl	80036b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <TIM5_IRQHandler+0x10>)
 8001e92:	f002 ffa4 	bl	8004dde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200001c0 	.word	0x200001c0

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f004 f92a 	bl	8006128 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20018000 	.word	0x20018000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	200002a4 	.word	0x200002a4
 8001f08:	200002c0 	.word	0x200002c0

08001f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f4c:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f5a:	f7ff ffd7 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f004 f8e9 	bl	8006134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7fe ffaf 	bl	8000ec4 <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001f74:	08006be4 	.word	0x08006be4
  ldr r2, =_sbss
 8001f78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001f7c:	200002bc 	.word	0x200002bc

08001f80 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <DMA1_Stream0_IRQHandler>

08001f82 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8001f82:	b4b0      	push	{r4, r5, r7}
 8001f84:	b08f      	sub	sp, #60	; 0x3c
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001f8a:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001f90:	2307      	movs	r3, #7
 8001f92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8001f96:	2307      	movs	r3, #7
 8001f98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001fa2:	23ff      	movs	r3, #255	; 0xff
 8001fa4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8001fa8:	2364      	movs	r3, #100	; 0x64
 8001faa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001fae:	2308      	movs	r3, #8
 8001fb0:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	f107 040c 	add.w	r4, r7, #12
 8001fba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fc6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	373c      	adds	r7, #60	; 0x3c
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bcb0      	pop	{r4, r5, r7}
 8001fd2:	4770      	bx	lr

08001fd4 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001fde:	2101      	movs	r1, #1
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9a0 	bl	8002326 <LoRa_read>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73bb      	strb	r3, [r7, #14]
	data = read;
 8001fea:	7bbb      	ldrb	r3, [r7, #14]
 8001fec:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8001ff4:	7bbb      	ldrb	r3, [r7, #14]
 8001ff6:	f023 0307 	bic.w	r3, r3, #7
 8001ffa:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
 8002002:	e03e      	b.n	8002082 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d10c      	bne.n	8002024 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 800200a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800200e:	f023 0307 	bic.w	r3, r3, #7
 8002012:	b25b      	sxtb	r3, r3
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	b25b      	sxtb	r3, r3
 800201a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	61da      	str	r2, [r3, #28]
 8002022:	e02e      	b.n	8002082 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d10c      	bne.n	8002044 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 800202a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800202e:	f023 0307 	bic.w	r3, r3, #7
 8002032:	b25b      	sxtb	r3, r3
 8002034:	f043 0303 	orr.w	r3, r3, #3
 8002038:	b25b      	sxtb	r3, r3
 800203a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2203      	movs	r2, #3
 8002040:	61da      	str	r2, [r3, #28]
 8002042:	e01e      	b.n	8002082 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 800204a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	b25b      	sxtb	r3, r3
 8002054:	f043 0305 	orr.w	r3, r3, #5
 8002058:	b25b      	sxtb	r3, r3
 800205a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2205      	movs	r2, #5
 8002060:	61da      	str	r2, [r3, #28]
 8002062:	e00e      	b.n	8002082 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b06      	cmp	r3, #6
 8002068:	d10b      	bne.n	8002082 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800206a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800206e:	f023 0307 	bic.w	r3, r3, #7
 8002072:	b25b      	sxtb	r3, r3
 8002074:	f043 0306 	orr.w	r3, r3, #6
 8002078:	b25b      	sxtb	r3, r3
 800207a:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2206      	movs	r2, #6
 8002080:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	461a      	mov	r2, r3
 8002086:	2101      	movs	r1, #1
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f966 	bl	800235a <LoRa_write>
	//HAL_Delay(10);
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	889b      	ldrh	r3, [r3, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	4619      	mov	r1, r3
 80020b2:	f001 fac9 	bl	8003648 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6998      	ldr	r0, [r3, #24]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020c0:	68b9      	ldr	r1, [r7, #8]
 80020c2:	f002 f82e 	bl	8004122 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80020c6:	bf00      	nop
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fc17 	bl	8004900 <HAL_SPI_GetState>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d1f7      	bne.n	80020c8 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6998      	ldr	r0, [r3, #24]
 80020dc:	8b3a      	ldrh	r2, [r7, #24]
 80020de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	f002 f959 	bl	800439a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80020e8:	bf00      	nop
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fc06 	bl	8004900 <HAL_SPI_GetState>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d1f7      	bne.n	80020ea <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	889b      	ldrh	r3, [r3, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	4619      	mov	r1, r3
 8002106:	f001 fa9f 	bl	8003648 <HAL_GPIO_WritePin>
}
 800210a:	bf00      	nop
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6818      	ldr	r0, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	889b      	ldrh	r3, [r3, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	4619      	mov	r1, r3
 800212e:	f001 fa8b 	bl	8003648 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6998      	ldr	r0, [r3, #24]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	f001 fff0 	bl	8004122 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002142:	bf00      	nop
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4618      	mov	r0, r3
 800214a:	f002 fbd9 	bl	8004900 <HAL_SPI_GetState>
 800214e:	4603      	mov	r3, r0
 8002150:	2b01      	cmp	r3, #1
 8002152:	d1f7      	bne.n	8002144 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6998      	ldr	r0, [r3, #24]
 8002158:	8b3a      	ldrh	r2, [r7, #24]
 800215a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800215e:	6839      	ldr	r1, [r7, #0]
 8002160:	f001 ffdf 	bl	8004122 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8002164:	bf00      	nop
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	4618      	mov	r0, r3
 800216c:	f002 fbc8 	bl	8004900 <HAL_SPI_GetState>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d1f7      	bne.n	8002166 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	889b      	ldrh	r3, [r3, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	4619      	mov	r1, r3
 8002182:	f001 fa61 	bl	8003648 <HAL_GPIO_WritePin>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	04db      	lsls	r3, r3, #19
 800219c:	115b      	asrs	r3, r3, #5
 800219e:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	0c1b      	lsrs	r3, r3, #16
 80021a4:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80021a6:	7afb      	ldrb	r3, [r7, #11]
 80021a8:	461a      	mov	r2, r3
 80021aa:	2106      	movs	r1, #6
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f8d4 	bl	800235a <LoRa_write>
	HAL_Delay(5);
 80021b2:	2005      	movs	r0, #5
 80021b4:	f000 fb1a 	bl	80027ec <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80021be:	7afb      	ldrb	r3, [r7, #11]
 80021c0:	461a      	mov	r2, r3
 80021c2:	2107      	movs	r1, #7
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8c8 	bl	800235a <LoRa_write>
	HAL_Delay(5);
 80021ca:	2005      	movs	r0, #5
 80021cc:	f000 fb0e 	bl	80027ec <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	461a      	mov	r2, r3
 80021d8:	2108      	movs	r1, #8
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8bd 	bl	800235a <LoRa_write>
	HAL_Delay(5);
 80021e0:	2005      	movs	r0, #5
 80021e2:	f000 fb03 	bl	80027ec <HAL_Delay>
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	dd01      	ble.n	8002202 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80021fe:	230c      	movs	r3, #12
 8002200:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	2b06      	cmp	r3, #6
 8002206:	dc01      	bgt.n	800220c <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8002208:	2307      	movs	r3, #7
 800220a:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800220c:	211e      	movs	r1, #30
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f889 	bl	8002326 <LoRa_read>
 8002214:	4603      	mov	r3, r0
 8002216:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f000 fae7 	bl	80027ec <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	b2da      	uxtb	r2, r3
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4413      	add	r3, r2
 8002230:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8002232:	7bbb      	ldrb	r3, [r7, #14]
 8002234:	461a      	mov	r2, r3
 8002236:	211e      	movs	r1, #30
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f88e 	bl	800235a <LoRa_write>
	HAL_Delay(10);
 800223e:	200a      	movs	r0, #10
 8002240:	f000 fad4 	bl	80027ec <HAL_Delay>
}
 8002244:	bf00      	nop
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	461a      	mov	r2, r3
 800225c:	2109      	movs	r1, #9
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f87b 	bl	800235a <LoRa_write>
	HAL_Delay(10);
 8002264:	200a      	movs	r0, #10
 8002266:	f000 fac1 	bl	80027ec <HAL_Delay>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	2b2c      	cmp	r3, #44	; 0x2c
 8002288:	d801      	bhi.n	800228e <LoRa_setOCP+0x1a>
		current = 45;
 800228a:	232d      	movs	r3, #45	; 0x2d
 800228c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	2bf0      	cmp	r3, #240	; 0xf0
 8002292:	d901      	bls.n	8002298 <LoRa_setOCP+0x24>
		current = 240;
 8002294:	23f0      	movs	r3, #240	; 0xf0
 8002296:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b78      	cmp	r3, #120	; 0x78
 800229c:	d809      	bhi.n	80022b2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	3b2d      	subs	r3, #45	; 0x2d
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <LoRa_setOCP+0x78>)
 80022a4:	fb82 1203 	smull	r1, r2, r2, r3
 80022a8:	1052      	asrs	r2, r2, #1
 80022aa:	17db      	asrs	r3, r3, #31
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e00b      	b.n	80022ca <LoRa_setOCP+0x56>
	else if(current <= 240)
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	2bf0      	cmp	r3, #240	; 0xf0
 80022b6:	d808      	bhi.n	80022ca <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	331e      	adds	r3, #30
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <LoRa_setOCP+0x78>)
 80022be:	fb82 1203 	smull	r1, r2, r2, r3
 80022c2:	1092      	asrs	r2, r2, #2
 80022c4:	17db      	asrs	r3, r3, #31
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	3320      	adds	r3, #32
 80022ce:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	461a      	mov	r2, r3
 80022d4:	210b      	movs	r1, #11
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f83f 	bl	800235a <LoRa_write>
	HAL_Delay(10);
 80022dc:	200a      	movs	r0, #10
 80022de:	f000 fa85 	bl	80027ec <HAL_Delay>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	66666667 	.word	0x66666667

080022f0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80022f8:	211e      	movs	r1, #30
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f813 	bl	8002326 <LoRa_read>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	f043 0307 	orr.w	r3, r3, #7
 800230a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 800230c:	7bbb      	ldrb	r3, [r7, #14]
 800230e:	461a      	mov	r2, r3
 8002310:	211e      	movs	r1, #30
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f821 	bl	800235a <LoRa_write>
	HAL_Delay(10);
 8002318:	200a      	movs	r0, #10
 800231a:	f000 fa67 	bl	80027ec <HAL_Delay>
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af02      	add	r7, sp, #8
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002338:	b2db      	uxtb	r3, r3
 800233a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800233c:	f107 030f 	add.w	r3, r7, #15
 8002340:	f107 010e 	add.w	r1, r7, #14
 8002344:	2201      	movs	r2, #1
 8002346:	9200      	str	r2, [sp, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fea3 	bl	8002096 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af02      	add	r7, sp, #8
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	460b      	mov	r3, r1
 8002364:	70fb      	strb	r3, [r7, #3]
 8002366:	4613      	mov	r3, r2
 8002368:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002370:	b2db      	uxtb	r3, r3
 8002372:	73bb      	strb	r3, [r7, #14]
	data = value;
 8002374:	78bb      	ldrb	r3, [r7, #2]
 8002376:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8002378:	f107 030f 	add.w	r3, r7, #15
 800237c:	f107 010e 	add.w	r1, r7, #14
 8002380:	2201      	movs	r2, #1
 8002382:	9200      	str	r2, [sp, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fec3 	bl	8002112 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	607a      	str	r2, [r7, #4]
 800239e:	461a      	mov	r2, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	72fb      	strb	r3, [r7, #11]
 80023a4:	4613      	mov	r3, r2
 80023a6:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	889b      	ldrh	r3, [r3, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	f001 f943 	bl	8003648 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6998      	ldr	r0, [r3, #24]
 80023c6:	f107 0117 	add.w	r1, r7, #23
 80023ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023ce:	2201      	movs	r2, #1
 80023d0:	f001 fea7 	bl	8004122 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80023d4:	bf00      	nop
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	4618      	mov	r0, r3
 80023dc:	f002 fa90 	bl	8004900 <HAL_SPI_GetState>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d1f7      	bne.n	80023d6 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6998      	ldr	r0, [r3, #24]
 80023ea:	7abb      	ldrb	r3, [r7, #10]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	f001 fe95 	bl	8004122 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80023f8:	bf00      	nop
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fa7e 	bl	8004900 <HAL_SPI_GetState>
 8002404:	4603      	mov	r3, r0
 8002406:	2b01      	cmp	r3, #1
 8002408:	d1f7      	bne.n	80023fa <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	889b      	ldrh	r3, [r3, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	4619      	mov	r1, r3
 8002416:	f001 f917 	bl	8003648 <HAL_GPIO_WritePin>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]

	return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	4611      	mov	r1, r2
 8002444:	461a      	mov	r2, r3
 8002446:	460b      	mov	r3, r1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	4613      	mov	r3, r2
 800244c:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002454:	2101      	movs	r1, #1
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff fdbc 	bl	8001fd4 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800245c:	210e      	movs	r1, #14
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f7ff ff61 	bl	8002326 <LoRa_read>
 8002464:	4603      	mov	r3, r0
 8002466:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	461a      	mov	r2, r3
 800246c:	210d      	movs	r1, #13
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff ff73 	bl	800235a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	461a      	mov	r2, r3
 8002478:	2122      	movs	r1, #34	; 0x22
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff ff6d 	bl	800235a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	2100      	movs	r1, #0
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff ff84 	bl	8002394 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800248c:	2103      	movs	r1, #3
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff fda0 	bl	8001fd4 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8002494:	2112      	movs	r1, #18
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ff45 	bl	8002326 <LoRa_read>
 800249c:	4603      	mov	r3, r0
 800249e:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	2112      	movs	r1, #18
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff ff53 	bl	800235a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff fd8c 	bl	8001fd4 <LoRa_gotoMode>
			return 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	e00f      	b.n	80024e0 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80024c0:	88bb      	ldrh	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	80bb      	strh	r3, [r7, #4]
 80024c6:	88bb      	ldrh	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 80024cc:	6979      	ldr	r1, [r7, #20]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fd80 	bl	8001fd4 <LoRa_gotoMode>
				return 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e003      	b.n	80024e0 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 80024d8:	2001      	movs	r0, #1
 80024da:	f000 f987 	bl	80027ec <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 80024de:	e7d9      	b.n	8002494 <LoRa_transmit+0x5c>
	}

}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80024f0:	2105      	movs	r1, #5
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff fd6e 	bl	8001fd4 <LoRa_gotoMode>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	4613      	mov	r3, r2
 800250c:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e007      	b.n	8002528 <LoRa_receive+0x28>
		data[i]=0;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4413      	add	r3, r2
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	3301      	adds	r3, #1
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	429a      	cmp	r2, r3
 800252e:	dbf3      	blt.n	8002518 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8002530:	2101      	movs	r1, #1
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff fd4e 	bl	8001fd4 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8002538:	2112      	movs	r1, #18
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f7ff fef3 	bl	8002326 <LoRa_read>
 8002540:	4603      	mov	r3, r0
 8002542:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8002544:	7cfb      	ldrb	r3, [r7, #19]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d02f      	beq.n	80025ae <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 800254e:	22ff      	movs	r2, #255	; 0xff
 8002550:	2112      	movs	r1, #18
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f7ff ff01 	bl	800235a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8002558:	2113      	movs	r1, #19
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f7ff fee3 	bl	8002326 <LoRa_read>
 8002560:	4603      	mov	r3, r0
 8002562:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8002564:	2110      	movs	r1, #16
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff fedd 	bl	8002326 <LoRa_read>
 800256c:	4603      	mov	r3, r0
 800256e:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8002570:	7cfb      	ldrb	r3, [r7, #19]
 8002572:	461a      	mov	r2, r3
 8002574:	210d      	movs	r1, #13
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff feef 	bl	800235a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800257c:	7cba      	ldrb	r2, [r7, #18]
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	4293      	cmp	r3, r2
 8002582:	bf28      	it	cs
 8002584:	4613      	movcs	r3, r2
 8002586:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e00b      	b.n	80025a6 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	18d4      	adds	r4, r2, r3
 8002594:	2100      	movs	r1, #0
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fec5 	bl	8002326 <LoRa_read>
 800259c:	4603      	mov	r3, r0
 800259e:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	3301      	adds	r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	dbef      	blt.n	800258e <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 80025ae:	2105      	movs	r1, #5
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff fd0f 	bl	8001fd4 <LoRa_gotoMode>
    return min;
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3724      	adds	r7, #36	; 0x24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff2a 	bl	8002422 <LoRa_isvalid>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8093 	beq.w	80026fc <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80025d6:	2100      	movs	r1, #0
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff fcfb 	bl	8001fd4 <LoRa_gotoMode>
			HAL_Delay(10);
 80025de:	200a      	movs	r0, #10
 80025e0:	f000 f904 	bl	80027ec <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80025e4:	2101      	movs	r1, #1
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fe9d 	bl	8002326 <LoRa_read>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80025f0:	200a      	movs	r0, #10
 80025f2:	f000 f8fb 	bl	80027ec <HAL_Delay>
			data = read | 0x80;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025fc:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	461a      	mov	r2, r3
 8002602:	2101      	movs	r1, #1
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fea8 	bl	800235a <LoRa_write>
			HAL_Delay(100);
 800260a:	2064      	movs	r0, #100	; 0x64
 800260c:	f000 f8ee 	bl	80027ec <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fdb9 	bl	800218e <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fe11 	bl	800224c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fe1e 	bl	8002274 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8002638:	2223      	movs	r2, #35	; 0x23
 800263a:	210c      	movs	r1, #12
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff fe8c 	bl	800235a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fe54 	bl	80022f0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fdcc 	bl	80021ee <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	211f      	movs	r1, #31
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fe7d 	bl	800235a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8002660:	2300      	movs	r3, #0
 8002662:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4413      	add	r3, r2
 800267a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	461a      	mov	r2, r3
 8002680:	211d      	movs	r1, #29
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fe69 	bl	800235a <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	b29b      	uxth	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	2120      	movs	r1, #32
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fe5f 	bl	800235a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
 80026a4:	2121      	movs	r1, #33	; 0x21
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff fe57 	bl	800235a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80026ac:	2140      	movs	r1, #64	; 0x40
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fe39 	bl	8002326 <LoRa_read>
 80026b4:	4603      	mov	r3, r0
 80026b6:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80026be:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	461a      	mov	r2, r3
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fe47 	bl	800235a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80026cc:	2101      	movs	r1, #1
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff fc80 	bl	8001fd4 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80026da:	200a      	movs	r0, #10
 80026dc:	f000 f886 	bl	80027ec <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80026e0:	2142      	movs	r1, #66	; 0x42
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fe1f 	bl	8002326 <LoRa_read>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b12      	cmp	r3, #18
 80026f0:	d101      	bne.n	80026f6 <LoRa_init+0x136>
				return LORA_OK;
 80026f2:	23c8      	movs	r3, #200	; 0xc8
 80026f4:	e004      	b.n	8002700 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80026f6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80026fa:	e001      	b.n	8002700 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80026fc:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	; (8002748 <HAL_Init+0x40>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002718:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <HAL_Init+0x40>)
 800271e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_Init+0x40>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 fdab 	bl	800328c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff f978 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fdc3 	bl	80032f6 <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 fd8b 	bl	80032a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000004 	.word	0x20000004
 80027a4:	2000000c 	.word	0x2000000c
 80027a8:	20000008 	.word	0x20000008

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	2000000c 	.word	0x2000000c
 80027d0:	200002a8 	.word	0x200002a8

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200002a8 	.word	0x200002a8

080027ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff ffee 	bl	80027d4 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d005      	beq.n	8002812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_Delay+0x44>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002812:	bf00      	nop
 8002814:	f7ff ffde 	bl	80027d4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d8f7      	bhi.n	8002814 <HAL_Delay+0x28>
  {
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	2000000c 	.word	0x2000000c

08002834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e033      	b.n	80028b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff f914 	bl	8001a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800287a:	f023 0302 	bic.w	r3, r3, #2
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fb2a 	bl	8002ee0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
 80028a2:	e001      	b.n	80028a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Start_IT+0x1a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0a1      	b.n	8002a1a <HAL_ADC_Start_IT+0x15e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d018      	beq.n	800291e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028fc:	4b4a      	ldr	r3, [pc, #296]	; (8002a28 <HAL_ADC_Start_IT+0x16c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <HAL_ADC_Start_IT+0x170>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9a      	lsrs	r2, r3, #18
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002910:	e002      	b.n	8002918 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3b01      	subs	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f9      	bne.n	8002912 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d169      	bne.n	8002a00 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002956:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d106      	bne.n	800297a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f023 0206 	bic.w	r2, r3, #6
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
 8002978:	e002      	b.n	8002980 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002988:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_ADC_Start_IT+0x174>)
 800298a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002994:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a4:	f043 0320 	orr.w	r3, r3, #32
 80029a8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d129      	bne.n	8002a18 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	e020      	b.n	8002a18 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_ADC_Start_IT+0x178>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d11b      	bne.n	8002a18 <HAL_ADC_Start_IT+0x15c>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d114      	bne.n	8002a18 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029fc:	609a      	str	r2, [r3, #8]
 80029fe:	e00b      	b.n	8002a18 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f043 0210 	orr.w	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	431bde83 	.word	0x431bde83
 8002a30:	40012300 	.word	0x40012300
 8002a34:	40012000 	.word	0x40012000

08002a38 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d049      	beq.n	8002b02 <HAL_ADC_IRQHandler+0xca>
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d046      	beq.n	8002b02 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d12b      	bne.n	8002af2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d127      	bne.n	8002af2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d119      	bne.n	8002af2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0220 	bic.w	r2, r2, #32
 8002acc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d105      	bne.n	8002af2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0201 	orr.w	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7fe f9d6 	bl	8000ea4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0212 	mvn.w	r2, #18
 8002b00:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d057      	beq.n	8002bc8 <HAL_ADC_IRQHandler+0x190>
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d054      	beq.n	8002bc8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d105      	bne.n	8002b36 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d139      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d12b      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d124      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d11d      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d119      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685a      	ldr	r2, [r3, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f043 0201 	orr.w	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 fa8d 	bl	80030d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 020c 	mvn.w	r2, #12
 8002bc6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d017      	beq.n	8002c0e <HAL_ADC_IRQHandler+0x1d6>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d014      	beq.n	8002c0e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10d      	bne.n	8002c0e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f837 	bl	8002c72 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0201 	mvn.w	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c1c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x218>
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d012      	beq.n	8002c50 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	f043 0202 	orr.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f06f 0220 	mvn.w	r2, #32
 8002c3e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f820 	bl	8002c86 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f06f 0220 	mvn.w	r2, #32
 8002c4e:	601a      	str	r2, [r3, #0]
  }
}
 8002c50:	bf00      	nop
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1c>
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e105      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x228>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b09      	cmp	r3, #9
 8002cc6:	d925      	bls.n	8002d14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68d9      	ldr	r1, [r3, #12]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	3b1e      	subs	r3, #30
 8002cde:	2207      	movs	r2, #7
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	400a      	ands	r2, r1
 8002cec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68d9      	ldr	r1, [r3, #12]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	4603      	mov	r3, r0
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4403      	add	r3, r0
 8002d06:	3b1e      	subs	r3, #30
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	e022      	b.n	8002d5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6919      	ldr	r1, [r3, #16]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	4613      	mov	r3, r2
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	4413      	add	r3, r2
 8002d28:	2207      	movs	r2, #7
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	400a      	ands	r2, r1
 8002d36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	689a      	ldr	r2, [r3, #8]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4618      	mov	r0, r3
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4403      	add	r3, r0
 8002d50:	409a      	lsls	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d824      	bhi.n	8002dac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	3b05      	subs	r3, #5
 8002d74:	221f      	movs	r2, #31
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	400a      	ands	r2, r1
 8002d82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3b05      	subs	r3, #5
 8002d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	635a      	str	r2, [r3, #52]	; 0x34
 8002daa:	e04c      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d824      	bhi.n	8002dfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b23      	subs	r3, #35	; 0x23
 8002dc6:	221f      	movs	r2, #31
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	3b23      	subs	r3, #35	; 0x23
 8002df0:	fa00 f203 	lsl.w	r2, r0, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfc:	e023      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b41      	subs	r3, #65	; 0x41
 8002e10:	221f      	movs	r2, #31
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	3b41      	subs	r3, #65	; 0x41
 8002e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_ADC_ConfigChannel+0x234>)
 8002e48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <HAL_ADC_ConfigChannel+0x238>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d109      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x1cc>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b12      	cmp	r3, #18
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_ADC_ConfigChannel+0x238>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d123      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x21e>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d003      	beq.n	8002e82 <HAL_ADC_ConfigChannel+0x1e6>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b11      	cmp	r3, #17
 8002e80:	d11b      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b10      	cmp	r3, #16
 8002e94:	d111      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_ADC_ConfigChannel+0x23c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a10      	ldr	r2, [pc, #64]	; (8002edc <HAL_ADC_ConfigChannel+0x240>)
 8002e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea0:	0c9a      	lsrs	r2, r3, #18
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eac:	e002      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f9      	bne.n	8002eae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40012300 	.word	0x40012300
 8002ed4:	40012000 	.word	0x40012000
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	431bde83 	.word	0x431bde83

08002ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ee8:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <ADC_Init+0x1f0>)
 8002eea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	021a      	lsls	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6899      	ldr	r1, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <ADC_Init+0x1f4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d022      	beq.n	8002fbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6899      	ldr	r1, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6899      	ldr	r1, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	e00f      	b.n	8002fde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0202 	bic.w	r2, r2, #2
 8002fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	7e1b      	ldrb	r3, [r3, #24]
 8002ff8:	005a      	lsls	r2, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800302a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	3b01      	subs	r3, #1
 8003038:	035a      	lsls	r2, r3, #13
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
 8003042:	e007      	b.n	8003054 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003052:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	3b01      	subs	r3, #1
 8003070:	051a      	lsls	r2, r3, #20
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6899      	ldr	r1, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003096:	025a      	lsls	r2, r3, #9
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	029a      	lsls	r2, r3, #10
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	609a      	str	r2, [r3, #8]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40012300 	.word	0x40012300
 80030d4:	0f000001 	.word	0x0f000001

080030d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003258:	d301      	bcc.n	800325e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325a:	2301      	movs	r3, #1
 800325c:	e00f      	b.n	800327e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <SysTick_Config+0x40>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003266:	210f      	movs	r1, #15
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7ff ff8e 	bl	800318c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <SysTick_Config+0x40>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <SysTick_Config+0x40>)
 8003278:	2207      	movs	r2, #7
 800327a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000e010 	.word	0xe000e010

0800328c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff29 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff ff3e 	bl	8003134 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff8e 	bl	80031e0 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5d 	bl	800318c <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa2 	bl	8003248 <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	; 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	e159      	b.n	80035e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800332c:	2201      	movs	r2, #1
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	429a      	cmp	r2, r3
 8003346:	f040 8148 	bne.w	80035da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d005      	beq.n	8003362 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335e:	2b02      	cmp	r3, #2
 8003360:	d130      	bne.n	80033c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2203      	movs	r2, #3
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	4013      	ands	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 0201 	and.w	r2, r3, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0303 	and.w	r3, r3, #3
 80033cc:	2b03      	cmp	r3, #3
 80033ce:	d017      	beq.n	8003400 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	2203      	movs	r2, #3
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d123      	bne.n	8003454 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	08da      	lsrs	r2, r3, #3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3208      	adds	r2, #8
 8003414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	220f      	movs	r2, #15
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	08da      	lsrs	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3208      	adds	r2, #8
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0203 	and.w	r2, r3, #3
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80a2 	beq.w	80035da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	4b57      	ldr	r3, [pc, #348]	; (80035f8 <HAL_GPIO_Init+0x2e8>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_GPIO_Init+0x2e8>)
 80034a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b54      	ldr	r3, [pc, #336]	; (80035f8 <HAL_GPIO_Init+0x2e8>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034b2:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_GPIO_Init+0x2ec>)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	089b      	lsrs	r3, r3, #2
 80034b8:	3302      	adds	r3, #2
 80034ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	220f      	movs	r2, #15
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a49      	ldr	r2, [pc, #292]	; (8003600 <HAL_GPIO_Init+0x2f0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d019      	beq.n	8003512 <HAL_GPIO_Init+0x202>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a48      	ldr	r2, [pc, #288]	; (8003604 <HAL_GPIO_Init+0x2f4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <HAL_GPIO_Init+0x1fe>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a47      	ldr	r2, [pc, #284]	; (8003608 <HAL_GPIO_Init+0x2f8>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00d      	beq.n	800350a <HAL_GPIO_Init+0x1fa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a46      	ldr	r2, [pc, #280]	; (800360c <HAL_GPIO_Init+0x2fc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d007      	beq.n	8003506 <HAL_GPIO_Init+0x1f6>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a45      	ldr	r2, [pc, #276]	; (8003610 <HAL_GPIO_Init+0x300>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d101      	bne.n	8003502 <HAL_GPIO_Init+0x1f2>
 80034fe:	2304      	movs	r3, #4
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x204>
 8003502:	2307      	movs	r3, #7
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x204>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x204>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x204>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x204>
 8003512:	2300      	movs	r3, #0
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003524:	4935      	ldr	r1, [pc, #212]	; (80035fc <HAL_GPIO_Init+0x2ec>)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003532:	4b38      	ldr	r3, [pc, #224]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003556:	4a2f      	ldr	r2, [pc, #188]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800355c:	4b2d      	ldr	r3, [pc, #180]	; (8003614 <HAL_GPIO_Init+0x304>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_GPIO_Init+0x304>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035aa:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_GPIO_Init+0x304>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b0:	4b18      	ldr	r3, [pc, #96]	; (8003614 <HAL_GPIO_Init+0x304>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d4:	4a0f      	ldr	r2, [pc, #60]	; (8003614 <HAL_GPIO_Init+0x304>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	f67f aea2 	bls.w	800332c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40013800 	.word	0x40013800
 8003600:	40020000 	.word	0x40020000
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
 800360c:	40020c00 	.word	0x40020c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40013c00 	.word	0x40013c00

08003618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	e001      	b.n	800363a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800363a:	7bfb      	ldrb	r3, [r7, #15]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	807b      	strh	r3, [r7, #2]
 8003654:	4613      	mov	r3, r2
 8003656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003658:	787b      	ldrb	r3, [r7, #1]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800365e:	887a      	ldrh	r2, [r7, #2]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003664:	e003      	b.n	800366e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003666:	887b      	ldrh	r3, [r7, #2]
 8003668:	041a      	lsls	r2, r3, #16
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	619a      	str	r2, [r3, #24]
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800368c:	887a      	ldrh	r2, [r7, #2]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4013      	ands	r3, r2
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43d9      	mvns	r1, r3
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	400b      	ands	r3, r1
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	619a      	str	r2, [r3, #24]
}
 80036a2:	bf00      	nop
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036ba:	4b08      	ldr	r3, [pc, #32]	; (80036dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036c6:	4a05      	ldr	r2, [pc, #20]	; (80036dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd fba6 	bl	8000e20 <HAL_GPIO_EXTI_Callback>
  }
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40013c00 	.word	0x40013c00

080036e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e267      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d075      	beq.n	80037ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036fe:	4b88      	ldr	r3, [pc, #544]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b04      	cmp	r3, #4
 8003708:	d00c      	beq.n	8003724 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370a:	4b85      	ldr	r3, [pc, #532]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003712:	2b08      	cmp	r3, #8
 8003714:	d112      	bne.n	800373c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003716:	4b82      	ldr	r3, [pc, #520]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003722:	d10b      	bne.n	800373c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003724:	4b7e      	ldr	r3, [pc, #504]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d05b      	beq.n	80037e8 <HAL_RCC_OscConfig+0x108>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d157      	bne.n	80037e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e242      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d106      	bne.n	8003754 <HAL_RCC_OscConfig+0x74>
 8003746:	4b76      	ldr	r3, [pc, #472]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a75      	ldr	r2, [pc, #468]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0xb0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0x98>
 800375e:	4b70      	ldr	r3, [pc, #448]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6f      	ldr	r2, [pc, #444]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b6d      	ldr	r3, [pc, #436]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a6c      	ldr	r2, [pc, #432]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0xb0>
 8003778:	4b69      	ldr	r3, [pc, #420]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a68      	ldr	r2, [pc, #416]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b66      	ldr	r3, [pc, #408]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a65      	ldr	r2, [pc, #404]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7ff f81c 	bl	80027d4 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a0:	f7ff f818 	bl	80027d4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e207      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0xc0>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7ff f808 	bl	80027d4 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c8:	f7ff f804 	bl	80027d4 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	; 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e1f3      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	4b51      	ldr	r3, [pc, #324]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0xe8>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d063      	beq.n	80038be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037f6:	4b4a      	ldr	r3, [pc, #296]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380a:	2b08      	cmp	r3, #8
 800380c:	d11c      	bne.n	8003848 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380e:	4b44      	ldr	r3, [pc, #272]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d116      	bne.n	8003848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381a:	4b41      	ldr	r3, [pc, #260]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d005      	beq.n	8003832 <HAL_RCC_OscConfig+0x152>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e1c7      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4937      	ldr	r1, [pc, #220]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003842:	4313      	orrs	r3, r2
 8003844:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003846:	e03a      	b.n	80038be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003850:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_RCC_OscConfig+0x244>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe ffbd 	bl	80027d4 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800385e:	f7fe ffb9 	bl	80027d4 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e1a8      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d0f0      	beq.n	800385e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4925      	ldr	r1, [pc, #148]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 800388c:	4313      	orrs	r3, r2
 800388e:	600b      	str	r3, [r1, #0]
 8003890:	e015      	b.n	80038be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003892:	4b24      	ldr	r3, [pc, #144]	; (8003924 <HAL_RCC_OscConfig+0x244>)
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe ff9c 	bl	80027d4 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe ff98 	bl	80027d4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e187      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	4b1b      	ldr	r3, [pc, #108]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d036      	beq.n	8003938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d016      	beq.n	8003900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <HAL_RCC_OscConfig+0x248>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d8:	f7fe ff7c 	bl	80027d4 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e0:	f7fe ff78 	bl	80027d4 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e167      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_OscConfig+0x240>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCC_OscConfig+0x200>
 80038fe:	e01b      	b.n	8003938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <HAL_RCC_OscConfig+0x248>)
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003906:	f7fe ff65 	bl	80027d4 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	e00e      	b.n	800392c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800390e:	f7fe ff61 	bl	80027d4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d907      	bls.n	800392c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e150      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
 8003920:	40023800 	.word	0x40023800
 8003924:	42470000 	.word	0x42470000
 8003928:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800392c:	4b88      	ldr	r3, [pc, #544]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 800392e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ea      	bne.n	800390e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8097 	beq.w	8003a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394a:	4b81      	ldr	r3, [pc, #516]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10f      	bne.n	8003976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	4b7d      	ldr	r3, [pc, #500]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	4a7c      	ldr	r2, [pc, #496]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6413      	str	r3, [r2, #64]	; 0x40
 8003966:	4b7a      	ldr	r3, [pc, #488]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b77      	ldr	r3, [pc, #476]	; (8003b54 <HAL_RCC_OscConfig+0x474>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b74      	ldr	r3, [pc, #464]	; (8003b54 <HAL_RCC_OscConfig+0x474>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a73      	ldr	r2, [pc, #460]	; (8003b54 <HAL_RCC_OscConfig+0x474>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fe ff21 	bl	80027d4 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fe ff1d 	bl	80027d4 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e10c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b6a      	ldr	r3, [pc, #424]	; (8003b54 <HAL_RCC_OscConfig+0x474>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x2ea>
 80039bc:	4b64      	ldr	r3, [pc, #400]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c0:	4a63      	ldr	r2, [pc, #396]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6713      	str	r3, [r2, #112]	; 0x70
 80039c8:	e01c      	b.n	8003a04 <HAL_RCC_OscConfig+0x324>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b05      	cmp	r3, #5
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x30c>
 80039d2:	4b5f      	ldr	r3, [pc, #380]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a5e      	ldr	r2, [pc, #376]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
 80039de:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a5b      	ldr	r2, [pc, #364]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e00b      	b.n	8003a04 <HAL_RCC_OscConfig+0x324>
 80039ec:	4b58      	ldr	r3, [pc, #352]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a57      	ldr	r2, [pc, #348]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039f2:	f023 0301 	bic.w	r3, r3, #1
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
 80039f8:	4b55      	ldr	r3, [pc, #340]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	4a54      	ldr	r2, [pc, #336]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 80039fe:	f023 0304 	bic.w	r3, r3, #4
 8003a02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d015      	beq.n	8003a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe fee2 	bl	80027d4 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	e00a      	b.n	8003a2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a14:	f7fe fede 	bl	80027d4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e0cb      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2a:	4b49      	ldr	r3, [pc, #292]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0ee      	beq.n	8003a14 <HAL_RCC_OscConfig+0x334>
 8003a36:	e014      	b.n	8003a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a38:	f7fe fecc 	bl	80027d4 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3e:	e00a      	b.n	8003a56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a40:	f7fe fec8 	bl	80027d4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0b5      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1ee      	bne.n	8003a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a68:	4b39      	ldr	r3, [pc, #228]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	4a38      	ldr	r2, [pc, #224]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f000 80a1 	beq.w	8003bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d05c      	beq.n	8003b44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d141      	bne.n	8003b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a92:	4b31      	ldr	r3, [pc, #196]	; (8003b58 <HAL_RCC_OscConfig+0x478>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fe9c 	bl	80027d4 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa0:	f7fe fe98 	bl	80027d4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e087      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab2:	4b27      	ldr	r3, [pc, #156]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	019b      	lsls	r3, r3, #6
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	085b      	lsrs	r3, r3, #1
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	491b      	ldr	r1, [pc, #108]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x478>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aee:	f7fe fe71 	bl	80027d4 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fe fe6d 	bl	80027d4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e05c      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b08:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x416>
 8003b14:	e054      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <HAL_RCC_OscConfig+0x478>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fe5a 	bl	80027d4 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fe fe56 	bl	80027d4 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e045      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <HAL_RCC_OscConfig+0x470>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x444>
 8003b42:	e03d      	b.n	8003bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d107      	bne.n	8003b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e038      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
 8003b50:	40023800 	.word	0x40023800
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_RCC_OscConfig+0x4ec>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d028      	beq.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d121      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d11a      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d111      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d107      	bne.n	8003bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800

08003bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0cc      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be4:	4b68      	ldr	r3, [pc, #416]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d90c      	bls.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b65      	ldr	r3, [pc, #404]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0b8      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d020      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c24:	4b59      	ldr	r3, [pc, #356]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d005      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c3c:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	4a52      	ldr	r2, [pc, #328]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b50      	ldr	r3, [pc, #320]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	494d      	ldr	r1, [pc, #308]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d044      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d107      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6e:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d119      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e07f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d003      	beq.n	8003c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d107      	bne.n	8003c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e06f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e067      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cae:	4b37      	ldr	r3, [pc, #220]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f023 0203 	bic.w	r2, r3, #3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4934      	ldr	r1, [pc, #208]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc0:	f7fe fd88 	bl	80027d4 <HAL_GetTick>
 8003cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc6:	e00a      	b.n	8003cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc8:	f7fe fd84 	bl	80027d4 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e04f      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cde:	4b2b      	ldr	r3, [pc, #172]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 020c 	and.w	r2, r3, #12
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d1eb      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d20c      	bcs.n	8003d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b22      	ldr	r3, [pc, #136]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b20      	ldr	r3, [pc, #128]	; (8003d88 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e032      	b.n	8003d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d008      	beq.n	8003d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4916      	ldr	r1, [pc, #88]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d009      	beq.n	8003d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d42:	4b12      	ldr	r3, [pc, #72]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	490e      	ldr	r1, [pc, #56]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d56:	f000 f821 	bl	8003d9c <HAL_RCC_GetSysClockFreq>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	490a      	ldr	r1, [pc, #40]	; (8003d90 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	5ccb      	ldrb	r3, [r1, r3]
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d72:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fce8 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40023c00 	.word	0x40023c00
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	08006b88 	.word	0x08006b88
 8003d94:	20000004 	.word	0x20000004
 8003d98:	20000008 	.word	0x20000008

08003d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da0:	b094      	sub	sp, #80	; 0x50
 8003da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	647b      	str	r3, [r7, #68]	; 0x44
 8003da8:	2300      	movs	r3, #0
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dac:	2300      	movs	r3, #0
 8003dae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db4:	4b79      	ldr	r3, [pc, #484]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d00d      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x40>
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	f200 80e1 	bhi.w	8003f88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dce:	e0db      	b.n	8003f88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd0:	4b73      	ldr	r3, [pc, #460]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003dd4:	e0db      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dd6:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dda:	e0d8      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003de6:	4b6d      	ldr	r3, [pc, #436]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df2:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	2200      	movs	r2, #0
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
 8003e06:	2300      	movs	r3, #0
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e0e:	4622      	mov	r2, r4
 8003e10:	462b      	mov	r3, r5
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f04f 0100 	mov.w	r1, #0
 8003e1a:	0159      	lsls	r1, r3, #5
 8003e1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e20:	0150      	lsls	r0, r2, #5
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4621      	mov	r1, r4
 8003e28:	1a51      	subs	r1, r2, r1
 8003e2a:	6139      	str	r1, [r7, #16]
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e32:	617b      	str	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e40:	4659      	mov	r1, fp
 8003e42:	018b      	lsls	r3, r1, #6
 8003e44:	4651      	mov	r1, sl
 8003e46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4a:	4651      	mov	r1, sl
 8003e4c:	018a      	lsls	r2, r1, #6
 8003e4e:	4651      	mov	r1, sl
 8003e50:	ebb2 0801 	subs.w	r8, r2, r1
 8003e54:	4659      	mov	r1, fp
 8003e56:	eb63 0901 	sbc.w	r9, r3, r1
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e6e:	4690      	mov	r8, r2
 8003e70:	4699      	mov	r9, r3
 8003e72:	4623      	mov	r3, r4
 8003e74:	eb18 0303 	adds.w	r3, r8, r3
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	eb49 0303 	adc.w	r3, r9, r3
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e8e:	4629      	mov	r1, r5
 8003e90:	024b      	lsls	r3, r1, #9
 8003e92:	4621      	mov	r1, r4
 8003e94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e98:	4621      	mov	r1, r4
 8003e9a:	024a      	lsls	r2, r1, #9
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eac:	f7fc fde6 	bl	8000a7c <__aeabi_uldivmod>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eb8:	e058      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	f04f 0000 	mov.w	r0, #0
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	0159      	lsls	r1, r3, #5
 8003ee2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee6:	0150      	lsls	r0, r2, #5
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4641      	mov	r1, r8
 8003eee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f10:	eb63 050b 	sbc.w	r5, r3, fp
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	00eb      	lsls	r3, r5, #3
 8003f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f22:	00e2      	lsls	r2, r4, #3
 8003f24:	4614      	mov	r4, r2
 8003f26:	461d      	mov	r5, r3
 8003f28:	4643      	mov	r3, r8
 8003f2a:	18e3      	adds	r3, r4, r3
 8003f2c:	603b      	str	r3, [r7, #0]
 8003f2e:	464b      	mov	r3, r9
 8003f30:	eb45 0303 	adc.w	r3, r5, r3
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	f04f 0300 	mov.w	r3, #0
 8003f3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f42:	4629      	mov	r1, r5
 8003f44:	028b      	lsls	r3, r1, #10
 8003f46:	4621      	mov	r1, r4
 8003f48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	028a      	lsls	r2, r1, #10
 8003f50:	4610      	mov	r0, r2
 8003f52:	4619      	mov	r1, r3
 8003f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f56:	2200      	movs	r2, #0
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	61fa      	str	r2, [r7, #28]
 8003f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f60:	f7fc fd8c 	bl	8000a7c <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3750      	adds	r7, #80	; 0x50
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	007a1200 	.word	0x007a1200

08003fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fae:	681b      	ldr	r3, [r3, #0]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000004 	.word	0x20000004

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc4:	f7ff fff0 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fd6:	5ccb      	ldrb	r3, [r1, r3]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	08006b98 	.word	0x08006b98

08003fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fec:	f7ff ffdc 	bl	8003fa8 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	0b5b      	lsrs	r3, r3, #13
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	08006b98 	.word	0x08006b98

08004010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e07b      	b.n	800411a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d108      	bne.n	800403c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004032:	d009      	beq.n	8004048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	61da      	str	r2, [r3, #28]
 800403a:	e005      	b.n	8004048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d106      	bne.n	8004068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd fd58 	bl	8001b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b8:	431a      	orrs	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040cc:	ea42 0103 	orr.w	r1, r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	0c1b      	lsrs	r3, r3, #16
 80040e6:	f003 0104 	and.w	r1, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	f003 0210 	and.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b088      	sub	sp, #32
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_SPI_Transmit+0x22>
 8004140:	2302      	movs	r3, #2
 8004142:	e126      	b.n	8004392 <HAL_SPI_Transmit+0x270>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800414c:	f7fe fb42 	bl	80027d4 <HAL_GetTick>
 8004150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004152:	88fb      	ldrh	r3, [r7, #6]
 8004154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d002      	beq.n	8004168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004162:	2302      	movs	r3, #2
 8004164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004166:	e10b      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_SPI_Transmit+0x52>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004178:	e102      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	88fa      	ldrh	r2, [r7, #6]
 8004192:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	d10f      	bne.n	80041e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d007      	beq.n	8004200 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004208:	d14b      	bne.n	80042a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_Transmit+0xf6>
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d13e      	bne.n	8004296 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	1c9a      	adds	r2, r3, #2
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004232:	b29b      	uxth	r3, r3
 8004234:	3b01      	subs	r3, #1
 8004236:	b29a      	uxth	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800423c:	e02b      	b.n	8004296 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b02      	cmp	r3, #2
 800424a:	d112      	bne.n	8004272 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	881a      	ldrh	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004270:	e011      	b.n	8004296 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004272:	f7fe faaf 	bl	80027d4 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d803      	bhi.n	800428a <HAL_SPI_Transmit+0x168>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d102      	bne.n	8004290 <HAL_SPI_Transmit+0x16e>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004294:	e074      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1ce      	bne.n	800423e <HAL_SPI_Transmit+0x11c>
 80042a0:	e04c      	b.n	800433c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_Transmit+0x18e>
 80042aa:	8afb      	ldrh	r3, [r7, #22]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d140      	bne.n	8004332 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	7812      	ldrb	r2, [r2, #0]
 80042bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042d6:	e02c      	b.n	8004332 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d113      	bne.n	800430e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	86da      	strh	r2, [r3, #54]	; 0x36
 800430c:	e011      	b.n	8004332 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800430e:	f7fe fa61 	bl	80027d4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d803      	bhi.n	8004326 <HAL_SPI_Transmit+0x204>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004324:	d102      	bne.n	800432c <HAL_SPI_Transmit+0x20a>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004330:	e026      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1cd      	bne.n	80042d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	6839      	ldr	r1, [r7, #0]
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fbd9 	bl	8004af8 <SPI_EndRxTxTransaction>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d002      	beq.n	8004352 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	77fb      	strb	r3, [r7, #31]
 800437c:	e000      	b.n	8004380 <HAL_SPI_Transmit+0x25e>
  }

error:
 800437e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004390:	7ffb      	ldrb	r3, [r7, #31]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3720      	adds	r7, #32
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b088      	sub	sp, #32
 800439e:	af02      	add	r7, sp, #8
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b6:	d112      	bne.n	80043de <HAL_SPI_Receive+0x44>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10e      	bne.n	80043de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2204      	movs	r2, #4
 80043c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043c8:	88fa      	ldrh	r2, [r7, #6]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	4613      	mov	r3, r2
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f8f1 	bl	80045bc <HAL_SPI_TransmitReceive>
 80043da:	4603      	mov	r3, r0
 80043dc:	e0ea      	b.n	80045b4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_SPI_Receive+0x52>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e0e3      	b.n	80045b4 <HAL_SPI_Receive+0x21a>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043f4:	f7fe f9ee 	bl	80027d4 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d002      	beq.n	800440c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004406:	2302      	movs	r3, #2
 8004408:	75fb      	strb	r3, [r7, #23]
    goto error;
 800440a:	e0ca      	b.n	80045a2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_SPI_Receive+0x7e>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d102      	bne.n	800441e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800441c:	e0c1      	b.n	80045a2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2204      	movs	r2, #4
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004464:	d10f      	bne.n	8004486 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004484:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d007      	beq.n	80044a4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d162      	bne.n	8004572 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80044ac:	e02e      	b.n	800450c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d115      	bne.n	80044e8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f103 020c 	add.w	r2, r3, #12
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	7812      	ldrb	r2, [r2, #0]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044e6:	e011      	b.n	800450c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e8:	f7fe f974 	bl	80027d4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d803      	bhi.n	8004500 <HAL_SPI_Receive+0x166>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fe:	d102      	bne.n	8004506 <HAL_SPI_Receive+0x16c>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d102      	bne.n	800450c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	75fb      	strb	r3, [r7, #23]
          goto error;
 800450a:	e04a      	b.n	80045a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1cb      	bne.n	80044ae <HAL_SPI_Receive+0x114>
 8004516:	e031      	b.n	800457c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b01      	cmp	r3, #1
 8004524:	d113      	bne.n	800454e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	b292      	uxth	r2, r2
 8004532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	1c9a      	adds	r2, r3, #2
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004542:	b29b      	uxth	r3, r3
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800454c:	e011      	b.n	8004572 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800454e:	f7fe f941 	bl	80027d4 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d803      	bhi.n	8004566 <HAL_SPI_Receive+0x1cc>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d102      	bne.n	800456c <HAL_SPI_Receive+0x1d2>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004570:	e017      	b.n	80045a2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1cd      	bne.n	8004518 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	6839      	ldr	r1, [r7, #0]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fa53 	bl	8004a2c <SPI_EndRxTransaction>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
 800459e:	e000      	b.n	80045a2 <HAL_SPI_Receive+0x208>
  }

error :
 80045a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08c      	sub	sp, #48	; 0x30
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045ca:	2301      	movs	r3, #1
 80045cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d101      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x26>
 80045de:	2302      	movs	r3, #2
 80045e0:	e18a      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x33c>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ea:	f7fe f8f3 	bl	80027d4 <HAL_GetTick>
 80045ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004600:	887b      	ldrh	r3, [r7, #2]
 8004602:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004608:	2b01      	cmp	r3, #1
 800460a:	d00f      	beq.n	800462c <HAL_SPI_TransmitReceive+0x70>
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004612:	d107      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d103      	bne.n	8004624 <HAL_SPI_TransmitReceive+0x68>
 800461c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004620:	2b04      	cmp	r3, #4
 8004622:	d003      	beq.n	800462c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004624:	2302      	movs	r3, #2
 8004626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800462a:	e15b      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d005      	beq.n	800463e <HAL_SPI_TransmitReceive+0x82>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_SPI_TransmitReceive+0x82>
 8004638:	887b      	ldrh	r3, [r7, #2]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d103      	bne.n	8004646 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004644:	e14e      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b04      	cmp	r3, #4
 8004650:	d003      	beq.n	800465a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2205      	movs	r2, #5
 8004656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	887a      	ldrh	r2, [r7, #2]
 800466a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	887a      	ldrh	r2, [r7, #2]
 8004670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	887a      	ldrh	r2, [r7, #2]
 800467c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	887a      	ldrh	r2, [r7, #2]
 8004682:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469a:	2b40      	cmp	r3, #64	; 0x40
 800469c:	d007      	beq.n	80046ae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046b6:	d178      	bne.n	80047aa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x10a>
 80046c0:	8b7b      	ldrh	r3, [r7, #26]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d166      	bne.n	8004794 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	881a      	ldrh	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	1c9a      	adds	r2, r3, #2
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ea:	e053      	b.n	8004794 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d11b      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x176>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d016      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x176>
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	2b01      	cmp	r3, #1
 8004708:	d113      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	881a      	ldrh	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	1c9a      	adds	r2, r3, #2
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b01      	cmp	r3, #1
 800473e:	d119      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x1b8>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d014      	beq.n	8004774 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	b292      	uxth	r2, r2
 8004756:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	1c9a      	adds	r2, r3, #2
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004770:	2301      	movs	r3, #1
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004774:	f7fe f82e 	bl	80027d4 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004780:	429a      	cmp	r2, r3
 8004782:	d807      	bhi.n	8004794 <HAL_SPI_TransmitReceive+0x1d8>
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d003      	beq.n	8004794 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004792:	e0a7      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1a6      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x130>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1a1      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x130>
 80047a8:	e07c      	b.n	80048a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_TransmitReceive+0x1fc>
 80047b2:	8b7b      	ldrh	r3, [r7, #26]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d16b      	bne.n	8004890 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047de:	e057      	b.n	8004890 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d11c      	bne.n	8004828 <HAL_SPI_TransmitReceive+0x26c>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d017      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x26c>
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d114      	bne.n	8004828 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	330c      	adds	r3, #12
 8004808:	7812      	ldrb	r2, [r2, #0]
 800480a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b01      	cmp	r3, #1
 8004834:	d119      	bne.n	800486a <HAL_SPI_TransmitReceive+0x2ae>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d014      	beq.n	800486a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004866:	2301      	movs	r3, #1
 8004868:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800486a:	f7fd ffb3 	bl	80027d4 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004876:	429a      	cmp	r2, r3
 8004878:	d803      	bhi.n	8004882 <HAL_SPI_TransmitReceive+0x2c6>
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d102      	bne.n	8004888 <HAL_SPI_TransmitReceive+0x2cc>
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800488e:	e029      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1a2      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x224>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d19d      	bne.n	80047e0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f925 	bl	8004af8 <SPI_EndRxTxTransaction>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d006      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048c0:	e010      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	e000      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3730      	adds	r7, #48	; 0x30
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490e:	b2db      	uxtb	r3, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800492c:	f7fd ff52 	bl	80027d4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	4413      	add	r3, r2
 800493a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800493c:	f7fd ff4a 	bl	80027d4 <HAL_GetTick>
 8004940:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	015b      	lsls	r3, r3, #5
 8004948:	0d1b      	lsrs	r3, r3, #20
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004952:	e054      	b.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d050      	beq.n	80049fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800495c:	f7fd ff3a 	bl	80027d4 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	429a      	cmp	r2, r3
 800496a:	d902      	bls.n	8004972 <SPI_WaitFlagStateUntilTimeout+0x56>
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d13d      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004980:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498a:	d111      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004994:	d004      	beq.n	80049a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499e:	d107      	bne.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b8:	d10f      	bne.n	80049da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e017      	b.n	8004a1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4013      	ands	r3, r2
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	79fb      	ldrb	r3, [r7, #7]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d19b      	bne.n	8004954 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	20000004 	.word	0x20000004

08004a2c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a40:	d111      	bne.n	8004a66 <SPI_EndRxTransaction+0x3a>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4a:	d004      	beq.n	8004a56 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d107      	bne.n	8004a66 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a6e:	d12a      	bne.n	8004ac6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a78:	d012      	beq.n	8004aa0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2200      	movs	r2, #0
 8004a82:	2180      	movs	r1, #128	; 0x80
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff49 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d02d      	beq.n	8004aec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a94:	f043 0220 	orr.w	r2, r3, #32
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e026      	b.n	8004aee <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f7ff ff36 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d01a      	beq.n	8004aec <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f043 0220 	orr.w	r2, r3, #32
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e013      	b.n	8004aee <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	2200      	movs	r2, #0
 8004ace:	2101      	movs	r1, #1
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7ff ff23 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae0:	f043 0220 	orr.w	r2, r3, #32
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e000      	b.n	8004aee <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b04:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <SPI_EndRxTxTransaction+0x7c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a1b      	ldr	r2, [pc, #108]	; (8004b78 <SPI_EndRxTxTransaction+0x80>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	0d5b      	lsrs	r3, r3, #21
 8004b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b14:	fb02 f303 	mul.w	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b22:	d112      	bne.n	8004b4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff fef4 	bl	800491c <SPI_WaitFlagStateUntilTimeout>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d016      	beq.n	8004b68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f043 0220 	orr.w	r2, r3, #32
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e00f      	b.n	8004b6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00a      	beq.n	8004b66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3b01      	subs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b60:	2b80      	cmp	r3, #128	; 0x80
 8004b62:	d0f2      	beq.n	8004b4a <SPI_EndRxTxTransaction+0x52>
 8004b64:	e000      	b.n	8004b68 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b66:	bf00      	nop
  }

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000004 	.word	0x20000004
 8004b78:	165e9f81 	.word	0x165e9f81

08004b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e041      	b.n	8004c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd f820 	bl	8001be8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fbca 	bl	8005354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	6a1a      	ldr	r2, [r3, #32]
 8004c28:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10f      	bne.n	8004c52 <HAL_TIM_Base_Stop+0x38>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	f240 4344 	movw	r3, #1092	; 0x444
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_TIM_Base_Stop+0x38>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0201 	bic.w	r2, r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d001      	beq.n	8004c80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e044      	b.n	8004d0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0201 	orr.w	r2, r2, #1
 8004c96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d018      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004caa:	d013      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1a      	ldr	r2, [pc, #104]	; (8004d1c <HAL_TIM_Base_Start_IT+0xb4>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d00e      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a19      	ldr	r2, [pc, #100]	; (8004d20 <HAL_TIM_Base_Start_IT+0xb8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d009      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <HAL_TIM_Base_Start_IT+0xbc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d004      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x6c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <HAL_TIM_Base_Start_IT+0xc0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d111      	bne.n	8004cf8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b06      	cmp	r3, #6
 8004ce4:	d010      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f042 0201 	orr.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf6:	e007      	b.n	8004d08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40010000 	.word	0x40010000
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40014000 	.word	0x40014000

08004d2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e041      	b.n	8004dc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 f839 	bl	8004dca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	f000 faf2 	bl	8005354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b082      	sub	sp, #8
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d122      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d11b      	bne.n	8004e3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f06f 0202 	mvn.w	r2, #2
 8004e0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0303 	and.w	r3, r3, #3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fa78 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8004e26:	e005      	b.n	8004e34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fa6a 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa7b 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d122      	bne.n	8004e8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d11b      	bne.n	8004e8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f06f 0204 	mvn.w	r2, #4
 8004e5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d003      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fa4e 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8004e7a:	e005      	b.n	8004e88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fa40 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa51 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d122      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d11b      	bne.n	8004ee2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f06f 0208 	mvn.w	r2, #8
 8004eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f003 0303 	and.w	r3, r3, #3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fa24 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8004ece:	e005      	b.n	8004edc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fa16 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fa27 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b10      	cmp	r3, #16
 8004eee:	d122      	bne.n	8004f36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d11b      	bne.n	8004f36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f06f 0210 	mvn.w	r2, #16
 8004f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f9fa 	bl	8005316 <HAL_TIM_IC_CaptureCallback>
 8004f22:	e005      	b.n	8004f30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f9ec 	bl	8005302 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f9fd 	bl	800532a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d10e      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d107      	bne.n	8004f62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0201 	mvn.w	r2, #1
 8004f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7fb ff0f 	bl	8000d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d10e      	bne.n	8004f8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b80      	cmp	r3, #128	; 0x80
 8004f7c:	d107      	bne.n	8004f8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fd01 	bl	8005990 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b40      	cmp	r3, #64	; 0x40
 8004f9a:	d10e      	bne.n	8004fba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d107      	bne.n	8004fba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f9c2 	bl	800533e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d10e      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f003 0320 	and.w	r3, r3, #32
 8004fd2:	2b20      	cmp	r3, #32
 8004fd4:	d107      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f06f 0220 	mvn.w	r2, #32
 8004fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fccb 	bl	800597c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800500a:	2302      	movs	r3, #2
 800500c:	e0ae      	b.n	800516c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b0c      	cmp	r3, #12
 800501a:	f200 809f 	bhi.w	800515c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005059 	.word	0x08005059
 8005028:	0800515d 	.word	0x0800515d
 800502c:	0800515d 	.word	0x0800515d
 8005030:	0800515d 	.word	0x0800515d
 8005034:	08005099 	.word	0x08005099
 8005038:	0800515d 	.word	0x0800515d
 800503c:	0800515d 	.word	0x0800515d
 8005040:	0800515d 	.word	0x0800515d
 8005044:	080050db 	.word	0x080050db
 8005048:	0800515d 	.word	0x0800515d
 800504c:	0800515d 	.word	0x0800515d
 8005050:	0800515d 	.word	0x0800515d
 8005054:	0800511b 	.word	0x0800511b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68b9      	ldr	r1, [r7, #8]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f9f8 	bl	8005454 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0208 	orr.w	r2, r2, #8
 8005072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0204 	bic.w	r2, r2, #4
 8005082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6999      	ldr	r1, [r3, #24]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	619a      	str	r2, [r3, #24]
      break;
 8005096:	e064      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68b9      	ldr	r1, [r7, #8]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fa3e 	bl	8005520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	699a      	ldr	r2, [r3, #24]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6999      	ldr	r1, [r3, #24]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	021a      	lsls	r2, r3, #8
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	619a      	str	r2, [r3, #24]
      break;
 80050d8:	e043      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fa89 	bl	80055f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0208 	orr.w	r2, r2, #8
 80050f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69da      	ldr	r2, [r3, #28]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0204 	bic.w	r2, r2, #4
 8005104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69d9      	ldr	r1, [r3, #28]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	61da      	str	r2, [r3, #28]
      break;
 8005118:	e023      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fad3 	bl	80056cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69da      	ldr	r2, [r3, #28]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69d9      	ldr	r1, [r3, #28]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	021a      	lsls	r2, r3, #8
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	61da      	str	r2, [r3, #28]
      break;
 800515a:	e002      	b.n	8005162 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]
      break;
 8005160:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800516a:	7dfb      	ldrb	r3, [r7, #23]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_TIM_ConfigClockSource+0x1c>
 800518c:	2302      	movs	r3, #2
 800518e:	e0b4      	b.n	80052fa <HAL_TIM_ConfigClockSource+0x186>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c8:	d03e      	beq.n	8005248 <HAL_TIM_ConfigClockSource+0xd4>
 80051ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ce:	f200 8087 	bhi.w	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d6:	f000 8086 	beq.w	80052e6 <HAL_TIM_ConfigClockSource+0x172>
 80051da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051de:	d87f      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b70      	cmp	r3, #112	; 0x70
 80051e2:	d01a      	beq.n	800521a <HAL_TIM_ConfigClockSource+0xa6>
 80051e4:	2b70      	cmp	r3, #112	; 0x70
 80051e6:	d87b      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b60      	cmp	r3, #96	; 0x60
 80051ea:	d050      	beq.n	800528e <HAL_TIM_ConfigClockSource+0x11a>
 80051ec:	2b60      	cmp	r3, #96	; 0x60
 80051ee:	d877      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b50      	cmp	r3, #80	; 0x50
 80051f2:	d03c      	beq.n	800526e <HAL_TIM_ConfigClockSource+0xfa>
 80051f4:	2b50      	cmp	r3, #80	; 0x50
 80051f6:	d873      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d058      	beq.n	80052ae <HAL_TIM_ConfigClockSource+0x13a>
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d86f      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b30      	cmp	r3, #48	; 0x30
 8005202:	d064      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	2b30      	cmp	r3, #48	; 0x30
 8005206:	d86b      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005208:	2b20      	cmp	r3, #32
 800520a:	d060      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 800520c:	2b20      	cmp	r3, #32
 800520e:	d867      	bhi.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005210:	2b00      	cmp	r3, #0
 8005212:	d05c      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 8005214:	2b10      	cmp	r3, #16
 8005216:	d05a      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0x15a>
 8005218:	e062      	b.n	80052e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6899      	ldr	r1, [r3, #8]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685a      	ldr	r2, [r3, #4]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f000 fb19 	bl	8005860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800523c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	609a      	str	r2, [r3, #8]
      break;
 8005246:	e04f      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6818      	ldr	r0, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	6899      	ldr	r1, [r3, #8]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f000 fb02 	bl	8005860 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800526a:	609a      	str	r2, [r3, #8]
      break;
 800526c:	e03c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6859      	ldr	r1, [r3, #4]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	461a      	mov	r2, r3
 800527c:	f000 fa76 	bl	800576c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2150      	movs	r1, #80	; 0x50
 8005286:	4618      	mov	r0, r3
 8005288:	f000 facf 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 800528c:	e02c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6859      	ldr	r1, [r3, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	461a      	mov	r2, r3
 800529c:	f000 fa95 	bl	80057ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2160      	movs	r1, #96	; 0x60
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fabf 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 80052ac:	e01c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6859      	ldr	r1, [r3, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f000 fa56 	bl	800576c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2140      	movs	r1, #64	; 0x40
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 faaf 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 80052cc:	e00c      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f000 faa6 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 80052de:	e003      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	73fb      	strb	r3, [r7, #15]
      break;
 80052e4:	e000      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
	...

08005354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a34      	ldr	r2, [pc, #208]	; (8005438 <TIM_Base_SetConfig+0xe4>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00f      	beq.n	800538c <TIM_Base_SetConfig+0x38>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005372:	d00b      	beq.n	800538c <TIM_Base_SetConfig+0x38>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a31      	ldr	r2, [pc, #196]	; (800543c <TIM_Base_SetConfig+0xe8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_Base_SetConfig+0x38>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a30      	ldr	r2, [pc, #192]	; (8005440 <TIM_Base_SetConfig+0xec>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0x38>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a2f      	ldr	r2, [pc, #188]	; (8005444 <TIM_Base_SetConfig+0xf0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d108      	bne.n	800539e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a25      	ldr	r2, [pc, #148]	; (8005438 <TIM_Base_SetConfig+0xe4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01b      	beq.n	80053de <TIM_Base_SetConfig+0x8a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d017      	beq.n	80053de <TIM_Base_SetConfig+0x8a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a22      	ldr	r2, [pc, #136]	; (800543c <TIM_Base_SetConfig+0xe8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <TIM_Base_SetConfig+0x8a>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a21      	ldr	r2, [pc, #132]	; (8005440 <TIM_Base_SetConfig+0xec>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00f      	beq.n	80053de <TIM_Base_SetConfig+0x8a>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a20      	ldr	r2, [pc, #128]	; (8005444 <TIM_Base_SetConfig+0xf0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00b      	beq.n	80053de <TIM_Base_SetConfig+0x8a>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1f      	ldr	r2, [pc, #124]	; (8005448 <TIM_Base_SetConfig+0xf4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d007      	beq.n	80053de <TIM_Base_SetConfig+0x8a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1e      	ldr	r2, [pc, #120]	; (800544c <TIM_Base_SetConfig+0xf8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <TIM_Base_SetConfig+0x8a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1d      	ldr	r2, [pc, #116]	; (8005450 <TIM_Base_SetConfig+0xfc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d108      	bne.n	80053f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a08      	ldr	r2, [pc, #32]	; (8005438 <TIM_Base_SetConfig+0xe4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d103      	bne.n	8005424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	615a      	str	r2, [r3, #20]
}
 800542a:	bf00      	nop
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0201 	bic.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0303 	bic.w	r3, r3, #3
 800548a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 0302 	bic.w	r3, r3, #2
 800549c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <TIM_OC1_SetConfig+0xc8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10c      	bne.n	80054ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0308 	bic.w	r3, r3, #8
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0304 	bic.w	r3, r3, #4
 80054c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a13      	ldr	r2, [pc, #76]	; (800551c <TIM_OC1_SetConfig+0xc8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d111      	bne.n	80054f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	621a      	str	r2, [r3, #32]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	40010000 	.word	0x40010000

08005520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f023 0210 	bic.w	r2, r3, #16
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800554e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f023 0320 	bic.w	r3, r3, #32
 800556a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <TIM_OC2_SetConfig+0xd4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d10d      	bne.n	800559c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <TIM_OC2_SetConfig+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d113      	bne.n	80055cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	621a      	str	r2, [r3, #32]
}
 80055e6:	bf00      	nop
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000

080055f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	021b      	lsls	r3, r3, #8
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1d      	ldr	r2, [pc, #116]	; (80056c8 <TIM_OC3_SetConfig+0xd0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d10d      	bne.n	8005672 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800565c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005670:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a14      	ldr	r2, [pc, #80]	; (80056c8 <TIM_OC3_SetConfig+0xd0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d113      	bne.n	80056a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	621a      	str	r2, [r3, #32]
}
 80056bc:	bf00      	nop
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	40010000 	.word	0x40010000

080056cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	021b      	lsls	r3, r3, #8
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	031b      	lsls	r3, r3, #12
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a10      	ldr	r2, [pc, #64]	; (8005768 <TIM_OC4_SetConfig+0x9c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d109      	bne.n	8005740 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005732:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	019b      	lsls	r3, r3, #6
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	621a      	str	r2, [r3, #32]
}
 800575a:	bf00      	nop
 800575c:	371c      	adds	r7, #28
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40010000 	.word	0x40010000

0800576c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0201 	bic.w	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 030a 	bic.w	r3, r3, #10
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b087      	sub	sp, #28
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0210 	bic.w	r2, r3, #16
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	031b      	lsls	r3, r3, #12
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005806:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	f043 0307 	orr.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	431a      	orrs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e050      	b.n	800595a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1c      	ldr	r2, [pc, #112]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d018      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005904:	d013      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a18      	ldr	r2, [pc, #96]	; (800596c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a16      	ldr	r2, [pc, #88]	; (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a15      	ldr	r2, [pc, #84]	; (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a13      	ldr	r2, [pc, #76]	; (8005978 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d10c      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4313      	orrs	r3, r2
 800593e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40010000 	.word	0x40010000
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40014000 	.word	0x40014000

0800597c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e03f      	b.n	8005a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f7fc f9be 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2224      	movs	r2, #36	; 0x24
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68da      	ldr	r2, [r3, #12]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f929 	bl	8005c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b08a      	sub	sp, #40	; 0x28
 8005a42:	af02      	add	r7, sp, #8
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d17c      	bne.n	8005b58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <HAL_UART_Transmit+0x2c>
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e075      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d101      	bne.n	8005a7c <HAL_UART_Transmit+0x3e>
 8005a78:	2302      	movs	r3, #2
 8005a7a:	e06e      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2221      	movs	r2, #33	; 0x21
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a92:	f7fc fe9f 	bl	80027d4 <HAL_GetTick>
 8005a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	88fa      	ldrh	r2, [r7, #6]
 8005a9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	88fa      	ldrh	r2, [r7, #6]
 8005aa2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aac:	d108      	bne.n	8005ac0 <HAL_UART_Transmit+0x82>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	e003      	b.n	8005ac8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ad0:	e02a      	b.n	8005b28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2180      	movs	r1, #128	; 0x80
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f840 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e036      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10b      	bne.n	8005b0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	461a      	mov	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	3302      	adds	r3, #2
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e007      	b.n	8005b1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1cf      	bne.n	8005ad2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2140      	movs	r1, #64	; 0x40
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f810 	bl	8005b62 <UART_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e006      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	e000      	b.n	8005b5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
  }
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b090      	sub	sp, #64	; 0x40
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b72:	e050      	b.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d04c      	beq.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d007      	beq.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b82:	f7fc fe27 	bl	80027d4 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d241      	bcs.n	8005c16 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	330c      	adds	r3, #12
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	330c      	adds	r3, #12
 8005bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bb2:	637a      	str	r2, [r7, #52]	; 0x34
 8005bb4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bba:	e841 2300 	strex	r3, r2, [r1]
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1e5      	bne.n	8005b92 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3314      	adds	r3, #20
 8005bcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	e853 3f00 	ldrex	r3, [r3]
 8005bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3314      	adds	r3, #20
 8005be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005be6:	623a      	str	r2, [r7, #32]
 8005be8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	69f9      	ldr	r1, [r7, #28]
 8005bec:	6a3a      	ldr	r2, [r7, #32]
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e5      	bne.n	8005bc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e00f      	b.n	8005c36 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	bf0c      	ite	eq
 8005c26:	2301      	moveq	r3, #1
 8005c28:	2300      	movne	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d09f      	beq.n	8005b74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3740      	adds	r7, #64	; 0x40
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c44:	b0c0      	sub	sp, #256	; 0x100
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	68d9      	ldr	r1, [r3, #12]
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	ea40 0301 	orr.w	r3, r0, r1
 8005c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c98:	f021 010c 	bic.w	r1, r1, #12
 8005c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cba:	6999      	ldr	r1, [r3, #24]
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	ea40 0301 	orr.w	r3, r0, r1
 8005cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b8f      	ldr	r3, [pc, #572]	; (8005f0c <UART_SetConfig+0x2cc>)
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d005      	beq.n	8005ce0 <UART_SetConfig+0xa0>
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b8d      	ldr	r3, [pc, #564]	; (8005f10 <UART_SetConfig+0x2d0>)
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d104      	bne.n	8005cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce0:	f7fe f982 	bl	8003fe8 <HAL_RCC_GetPCLK2Freq>
 8005ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ce8:	e003      	b.n	8005cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cea:	f7fe f969 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
 8005cee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfc:	f040 810c 	bne.w	8005f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d12:	4622      	mov	r2, r4
 8005d14:	462b      	mov	r3, r5
 8005d16:	1891      	adds	r1, r2, r2
 8005d18:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d1a:	415b      	adcs	r3, r3
 8005d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d22:	4621      	mov	r1, r4
 8005d24:	eb12 0801 	adds.w	r8, r2, r1
 8005d28:	4629      	mov	r1, r5
 8005d2a:	eb43 0901 	adc.w	r9, r3, r1
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d42:	4690      	mov	r8, r2
 8005d44:	4699      	mov	r9, r3
 8005d46:	4623      	mov	r3, r4
 8005d48:	eb18 0303 	adds.w	r3, r8, r3
 8005d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d50:	462b      	mov	r3, r5
 8005d52:	eb49 0303 	adc.w	r3, r9, r3
 8005d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d6e:	460b      	mov	r3, r1
 8005d70:	18db      	adds	r3, r3, r3
 8005d72:	653b      	str	r3, [r7, #80]	; 0x50
 8005d74:	4613      	mov	r3, r2
 8005d76:	eb42 0303 	adc.w	r3, r2, r3
 8005d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d84:	f7fa fe7a 	bl	8000a7c <__aeabi_uldivmod>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4b61      	ldr	r3, [pc, #388]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d92:	095b      	lsrs	r3, r3, #5
 8005d94:	011c      	lsls	r4, r3, #4
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	1891      	adds	r1, r2, r2
 8005dae:	64b9      	str	r1, [r7, #72]	; 0x48
 8005db0:	415b      	adcs	r3, r3
 8005db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005db8:	4641      	mov	r1, r8
 8005dba:	eb12 0a01 	adds.w	sl, r2, r1
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dd8:	4692      	mov	sl, r2
 8005dda:	469b      	mov	fp, r3
 8005ddc:	4643      	mov	r3, r8
 8005dde:	eb1a 0303 	adds.w	r3, sl, r3
 8005de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005de6:	464b      	mov	r3, r9
 8005de8:	eb4b 0303 	adc.w	r3, fp, r3
 8005dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e04:	460b      	mov	r3, r1
 8005e06:	18db      	adds	r3, r3, r3
 8005e08:	643b      	str	r3, [r7, #64]	; 0x40
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	eb42 0303 	adc.w	r3, r2, r3
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
 8005e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e1a:	f7fa fe2f 	bl	8000a7c <__aeabi_uldivmod>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	4b3b      	ldr	r3, [pc, #236]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005e26:	fba3 2301 	umull	r2, r3, r3, r1
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	2264      	movs	r2, #100	; 0x64
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	1acb      	subs	r3, r1, r3
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e3a:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e48:	441c      	add	r4, r3
 8005e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e5c:	4642      	mov	r2, r8
 8005e5e:	464b      	mov	r3, r9
 8005e60:	1891      	adds	r1, r2, r2
 8005e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e64:	415b      	adcs	r3, r3
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e6c:	4641      	mov	r1, r8
 8005e6e:	1851      	adds	r1, r2, r1
 8005e70:	6339      	str	r1, [r7, #48]	; 0x30
 8005e72:	4649      	mov	r1, r9
 8005e74:	414b      	adcs	r3, r1
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	f04f 0300 	mov.w	r3, #0
 8005e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e84:	4659      	mov	r1, fp
 8005e86:	00cb      	lsls	r3, r1, #3
 8005e88:	4651      	mov	r1, sl
 8005e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e8e:	4651      	mov	r1, sl
 8005e90:	00ca      	lsls	r2, r1, #3
 8005e92:	4610      	mov	r0, r2
 8005e94:	4619      	mov	r1, r3
 8005e96:	4603      	mov	r3, r0
 8005e98:	4642      	mov	r2, r8
 8005e9a:	189b      	adds	r3, r3, r2
 8005e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	eb42 0303 	adc.w	r3, r2, r3
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	18db      	adds	r3, r3, r3
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	eb42 0303 	adc.w	r3, r2, r3
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ed6:	f7fa fdd1 	bl	8000a7c <__aeabi_uldivmod>
 8005eda:	4602      	mov	r2, r0
 8005edc:	460b      	mov	r3, r1
 8005ede:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	2164      	movs	r1, #100	; 0x64
 8005ee8:	fb01 f303 	mul.w	r3, r1, r3
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	3332      	adds	r3, #50	; 0x32
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <UART_SetConfig+0x2d4>)
 8005ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	f003 0207 	and.w	r2, r3, #7
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4422      	add	r2, r4
 8005f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f08:	e105      	b.n	8006116 <UART_SetConfig+0x4d6>
 8005f0a:	bf00      	nop
 8005f0c:	40011000 	.word	0x40011000
 8005f10:	40011400 	.word	0x40011400
 8005f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f2a:	4642      	mov	r2, r8
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	1891      	adds	r1, r2, r2
 8005f30:	6239      	str	r1, [r7, #32]
 8005f32:	415b      	adcs	r3, r3
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
 8005f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	1854      	adds	r4, r2, r1
 8005f3e:	4649      	mov	r1, r9
 8005f40:	eb43 0501 	adc.w	r5, r3, r1
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	00eb      	lsls	r3, r5, #3
 8005f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f52:	00e2      	lsls	r2, r4, #3
 8005f54:	4614      	mov	r4, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	4643      	mov	r3, r8
 8005f5a:	18e3      	adds	r3, r4, r3
 8005f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f60:	464b      	mov	r3, r9
 8005f62:	eb45 0303 	adc.w	r3, r5, r3
 8005f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f7a:	f04f 0200 	mov.w	r2, #0
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f86:	4629      	mov	r1, r5
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	4621      	mov	r1, r4
 8005f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f90:	4621      	mov	r1, r4
 8005f92:	008a      	lsls	r2, r1, #2
 8005f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f98:	f7fa fd70 	bl	8000a7c <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4b60      	ldr	r3, [pc, #384]	; (8006124 <UART_SetConfig+0x4e4>)
 8005fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa6:	095b      	lsrs	r3, r3, #5
 8005fa8:	011c      	lsls	r4, r3, #4
 8005faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	464b      	mov	r3, r9
 8005fc0:	1891      	adds	r1, r2, r2
 8005fc2:	61b9      	str	r1, [r7, #24]
 8005fc4:	415b      	adcs	r3, r3
 8005fc6:	61fb      	str	r3, [r7, #28]
 8005fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fcc:	4641      	mov	r1, r8
 8005fce:	1851      	adds	r1, r2, r1
 8005fd0:	6139      	str	r1, [r7, #16]
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	414b      	adcs	r3, r1
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	f04f 0200 	mov.w	r2, #0
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	00cb      	lsls	r3, r1, #3
 8005fe8:	4651      	mov	r1, sl
 8005fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fee:	4651      	mov	r1, sl
 8005ff0:	00ca      	lsls	r2, r1, #3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	189b      	adds	r3, r3, r2
 8005ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006000:	464b      	mov	r3, r9
 8006002:	460a      	mov	r2, r1
 8006004:	eb42 0303 	adc.w	r3, r2, r3
 8006008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	67bb      	str	r3, [r7, #120]	; 0x78
 8006016:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006018:	f04f 0200 	mov.w	r2, #0
 800601c:	f04f 0300 	mov.w	r3, #0
 8006020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006024:	4649      	mov	r1, r9
 8006026:	008b      	lsls	r3, r1, #2
 8006028:	4641      	mov	r1, r8
 800602a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800602e:	4641      	mov	r1, r8
 8006030:	008a      	lsls	r2, r1, #2
 8006032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006036:	f7fa fd21 	bl	8000a7c <__aeabi_uldivmod>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	4b39      	ldr	r3, [pc, #228]	; (8006124 <UART_SetConfig+0x4e4>)
 8006040:	fba3 1302 	umull	r1, r3, r3, r2
 8006044:	095b      	lsrs	r3, r3, #5
 8006046:	2164      	movs	r1, #100	; 0x64
 8006048:	fb01 f303 	mul.w	r3, r1, r3
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	3332      	adds	r3, #50	; 0x32
 8006052:	4a34      	ldr	r2, [pc, #208]	; (8006124 <UART_SetConfig+0x4e4>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	095b      	lsrs	r3, r3, #5
 800605a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800605e:	441c      	add	r4, r3
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006064:	2200      	movs	r2, #0
 8006066:	673b      	str	r3, [r7, #112]	; 0x70
 8006068:	677a      	str	r2, [r7, #116]	; 0x74
 800606a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800606e:	4642      	mov	r2, r8
 8006070:	464b      	mov	r3, r9
 8006072:	1891      	adds	r1, r2, r2
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	415b      	adcs	r3, r3
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800607e:	4641      	mov	r1, r8
 8006080:	1851      	adds	r1, r2, r1
 8006082:	6039      	str	r1, [r7, #0]
 8006084:	4649      	mov	r1, r9
 8006086:	414b      	adcs	r3, r1
 8006088:	607b      	str	r3, [r7, #4]
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006096:	4659      	mov	r1, fp
 8006098:	00cb      	lsls	r3, r1, #3
 800609a:	4651      	mov	r1, sl
 800609c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a0:	4651      	mov	r1, sl
 80060a2:	00ca      	lsls	r2, r1, #3
 80060a4:	4610      	mov	r0, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	4603      	mov	r3, r0
 80060aa:	4642      	mov	r2, r8
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80060b0:	464b      	mov	r3, r9
 80060b2:	460a      	mov	r2, r1
 80060b4:	eb42 0303 	adc.w	r3, r2, r3
 80060b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	663b      	str	r3, [r7, #96]	; 0x60
 80060c4:	667a      	str	r2, [r7, #100]	; 0x64
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	f04f 0300 	mov.w	r3, #0
 80060ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060d2:	4649      	mov	r1, r9
 80060d4:	008b      	lsls	r3, r1, #2
 80060d6:	4641      	mov	r1, r8
 80060d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060dc:	4641      	mov	r1, r8
 80060de:	008a      	lsls	r2, r1, #2
 80060e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060e4:	f7fa fcca 	bl	8000a7c <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <UART_SetConfig+0x4e4>)
 80060ee:	fba3 1302 	umull	r1, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2164      	movs	r1, #100	; 0x64
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	3332      	adds	r3, #50	; 0x32
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <UART_SetConfig+0x4e4>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4422      	add	r2, r4
 8006114:	609a      	str	r2, [r3, #8]
}
 8006116:	bf00      	nop
 8006118:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800611c:	46bd      	mov	sp, r7
 800611e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006122:	bf00      	nop
 8006124:	51eb851f 	.word	0x51eb851f

08006128 <__errno>:
 8006128:	4b01      	ldr	r3, [pc, #4]	; (8006130 <__errno+0x8>)
 800612a:	6818      	ldr	r0, [r3, #0]
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000010 	.word	0x20000010

08006134 <__libc_init_array>:
 8006134:	b570      	push	{r4, r5, r6, lr}
 8006136:	4d0d      	ldr	r5, [pc, #52]	; (800616c <__libc_init_array+0x38>)
 8006138:	4c0d      	ldr	r4, [pc, #52]	; (8006170 <__libc_init_array+0x3c>)
 800613a:	1b64      	subs	r4, r4, r5
 800613c:	10a4      	asrs	r4, r4, #2
 800613e:	2600      	movs	r6, #0
 8006140:	42a6      	cmp	r6, r4
 8006142:	d109      	bne.n	8006158 <__libc_init_array+0x24>
 8006144:	4d0b      	ldr	r5, [pc, #44]	; (8006174 <__libc_init_array+0x40>)
 8006146:	4c0c      	ldr	r4, [pc, #48]	; (8006178 <__libc_init_array+0x44>)
 8006148:	f000 fca2 	bl	8006a90 <_init>
 800614c:	1b64      	subs	r4, r4, r5
 800614e:	10a4      	asrs	r4, r4, #2
 8006150:	2600      	movs	r6, #0
 8006152:	42a6      	cmp	r6, r4
 8006154:	d105      	bne.n	8006162 <__libc_init_array+0x2e>
 8006156:	bd70      	pop	{r4, r5, r6, pc}
 8006158:	f855 3b04 	ldr.w	r3, [r5], #4
 800615c:	4798      	blx	r3
 800615e:	3601      	adds	r6, #1
 8006160:	e7ee      	b.n	8006140 <__libc_init_array+0xc>
 8006162:	f855 3b04 	ldr.w	r3, [r5], #4
 8006166:	4798      	blx	r3
 8006168:	3601      	adds	r6, #1
 800616a:	e7f2      	b.n	8006152 <__libc_init_array+0x1e>
 800616c:	08006bdc 	.word	0x08006bdc
 8006170:	08006bdc 	.word	0x08006bdc
 8006174:	08006bdc 	.word	0x08006bdc
 8006178:	08006be0 	.word	0x08006be0

0800617c <memset>:
 800617c:	4402      	add	r2, r0
 800617e:	4603      	mov	r3, r0
 8006180:	4293      	cmp	r3, r2
 8006182:	d100      	bne.n	8006186 <memset+0xa>
 8006184:	4770      	bx	lr
 8006186:	f803 1b01 	strb.w	r1, [r3], #1
 800618a:	e7f9      	b.n	8006180 <memset+0x4>

0800618c <sniprintf>:
 800618c:	b40c      	push	{r2, r3}
 800618e:	b530      	push	{r4, r5, lr}
 8006190:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <sniprintf+0x64>)
 8006192:	1e0c      	subs	r4, r1, #0
 8006194:	681d      	ldr	r5, [r3, #0]
 8006196:	b09d      	sub	sp, #116	; 0x74
 8006198:	da08      	bge.n	80061ac <sniprintf+0x20>
 800619a:	238b      	movs	r3, #139	; 0x8b
 800619c:	602b      	str	r3, [r5, #0]
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	b01d      	add	sp, #116	; 0x74
 80061a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061a8:	b002      	add	sp, #8
 80061aa:	4770      	bx	lr
 80061ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061b4:	bf14      	ite	ne
 80061b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061ba:	4623      	moveq	r3, r4
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	9307      	str	r3, [sp, #28]
 80061c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061c4:	9002      	str	r0, [sp, #8]
 80061c6:	9006      	str	r0, [sp, #24]
 80061c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061ce:	ab21      	add	r3, sp, #132	; 0x84
 80061d0:	a902      	add	r1, sp, #8
 80061d2:	4628      	mov	r0, r5
 80061d4:	9301      	str	r3, [sp, #4]
 80061d6:	f000 f869 	bl	80062ac <_svfiprintf_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	bfbc      	itt	lt
 80061de:	238b      	movlt	r3, #139	; 0x8b
 80061e0:	602b      	strlt	r3, [r5, #0]
 80061e2:	2c00      	cmp	r4, #0
 80061e4:	d0dd      	beq.n	80061a2 <sniprintf+0x16>
 80061e6:	9b02      	ldr	r3, [sp, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e7d9      	b.n	80061a2 <sniprintf+0x16>
 80061ee:	bf00      	nop
 80061f0:	20000010 	.word	0x20000010

080061f4 <__ssputs_r>:
 80061f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	688e      	ldr	r6, [r1, #8]
 80061fa:	429e      	cmp	r6, r3
 80061fc:	4682      	mov	sl, r0
 80061fe:	460c      	mov	r4, r1
 8006200:	4690      	mov	r8, r2
 8006202:	461f      	mov	r7, r3
 8006204:	d838      	bhi.n	8006278 <__ssputs_r+0x84>
 8006206:	898a      	ldrh	r2, [r1, #12]
 8006208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800620c:	d032      	beq.n	8006274 <__ssputs_r+0x80>
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	6909      	ldr	r1, [r1, #16]
 8006212:	eba5 0901 	sub.w	r9, r5, r1
 8006216:	6965      	ldr	r5, [r4, #20]
 8006218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800621c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006220:	3301      	adds	r3, #1
 8006222:	444b      	add	r3, r9
 8006224:	106d      	asrs	r5, r5, #1
 8006226:	429d      	cmp	r5, r3
 8006228:	bf38      	it	cc
 800622a:	461d      	movcc	r5, r3
 800622c:	0553      	lsls	r3, r2, #21
 800622e:	d531      	bpl.n	8006294 <__ssputs_r+0xa0>
 8006230:	4629      	mov	r1, r5
 8006232:	f000 fb63 	bl	80068fc <_malloc_r>
 8006236:	4606      	mov	r6, r0
 8006238:	b950      	cbnz	r0, 8006250 <__ssputs_r+0x5c>
 800623a:	230c      	movs	r3, #12
 800623c:	f8ca 3000 	str.w	r3, [sl]
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006246:	81a3      	strh	r3, [r4, #12]
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006250:	6921      	ldr	r1, [r4, #16]
 8006252:	464a      	mov	r2, r9
 8006254:	f000 fabe 	bl	80067d4 <memcpy>
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800625e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006262:	81a3      	strh	r3, [r4, #12]
 8006264:	6126      	str	r6, [r4, #16]
 8006266:	6165      	str	r5, [r4, #20]
 8006268:	444e      	add	r6, r9
 800626a:	eba5 0509 	sub.w	r5, r5, r9
 800626e:	6026      	str	r6, [r4, #0]
 8006270:	60a5      	str	r5, [r4, #8]
 8006272:	463e      	mov	r6, r7
 8006274:	42be      	cmp	r6, r7
 8006276:	d900      	bls.n	800627a <__ssputs_r+0x86>
 8006278:	463e      	mov	r6, r7
 800627a:	6820      	ldr	r0, [r4, #0]
 800627c:	4632      	mov	r2, r6
 800627e:	4641      	mov	r1, r8
 8006280:	f000 fab6 	bl	80067f0 <memmove>
 8006284:	68a3      	ldr	r3, [r4, #8]
 8006286:	1b9b      	subs	r3, r3, r6
 8006288:	60a3      	str	r3, [r4, #8]
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	4433      	add	r3, r6
 800628e:	6023      	str	r3, [r4, #0]
 8006290:	2000      	movs	r0, #0
 8006292:	e7db      	b.n	800624c <__ssputs_r+0x58>
 8006294:	462a      	mov	r2, r5
 8006296:	f000 fba5 	bl	80069e4 <_realloc_r>
 800629a:	4606      	mov	r6, r0
 800629c:	2800      	cmp	r0, #0
 800629e:	d1e1      	bne.n	8006264 <__ssputs_r+0x70>
 80062a0:	6921      	ldr	r1, [r4, #16]
 80062a2:	4650      	mov	r0, sl
 80062a4:	f000 fabe 	bl	8006824 <_free_r>
 80062a8:	e7c7      	b.n	800623a <__ssputs_r+0x46>
	...

080062ac <_svfiprintf_r>:
 80062ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b0:	4698      	mov	r8, r3
 80062b2:	898b      	ldrh	r3, [r1, #12]
 80062b4:	061b      	lsls	r3, r3, #24
 80062b6:	b09d      	sub	sp, #116	; 0x74
 80062b8:	4607      	mov	r7, r0
 80062ba:	460d      	mov	r5, r1
 80062bc:	4614      	mov	r4, r2
 80062be:	d50e      	bpl.n	80062de <_svfiprintf_r+0x32>
 80062c0:	690b      	ldr	r3, [r1, #16]
 80062c2:	b963      	cbnz	r3, 80062de <_svfiprintf_r+0x32>
 80062c4:	2140      	movs	r1, #64	; 0x40
 80062c6:	f000 fb19 	bl	80068fc <_malloc_r>
 80062ca:	6028      	str	r0, [r5, #0]
 80062cc:	6128      	str	r0, [r5, #16]
 80062ce:	b920      	cbnz	r0, 80062da <_svfiprintf_r+0x2e>
 80062d0:	230c      	movs	r3, #12
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	e0d1      	b.n	800647e <_svfiprintf_r+0x1d2>
 80062da:	2340      	movs	r3, #64	; 0x40
 80062dc:	616b      	str	r3, [r5, #20]
 80062de:	2300      	movs	r3, #0
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	2320      	movs	r3, #32
 80062e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80062ec:	2330      	movs	r3, #48	; 0x30
 80062ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006498 <_svfiprintf_r+0x1ec>
 80062f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062f6:	f04f 0901 	mov.w	r9, #1
 80062fa:	4623      	mov	r3, r4
 80062fc:	469a      	mov	sl, r3
 80062fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006302:	b10a      	cbz	r2, 8006308 <_svfiprintf_r+0x5c>
 8006304:	2a25      	cmp	r2, #37	; 0x25
 8006306:	d1f9      	bne.n	80062fc <_svfiprintf_r+0x50>
 8006308:	ebba 0b04 	subs.w	fp, sl, r4
 800630c:	d00b      	beq.n	8006326 <_svfiprintf_r+0x7a>
 800630e:	465b      	mov	r3, fp
 8006310:	4622      	mov	r2, r4
 8006312:	4629      	mov	r1, r5
 8006314:	4638      	mov	r0, r7
 8006316:	f7ff ff6d 	bl	80061f4 <__ssputs_r>
 800631a:	3001      	adds	r0, #1
 800631c:	f000 80aa 	beq.w	8006474 <_svfiprintf_r+0x1c8>
 8006320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006322:	445a      	add	r2, fp
 8006324:	9209      	str	r2, [sp, #36]	; 0x24
 8006326:	f89a 3000 	ldrb.w	r3, [sl]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 80a2 	beq.w	8006474 <_svfiprintf_r+0x1c8>
 8006330:	2300      	movs	r3, #0
 8006332:	f04f 32ff 	mov.w	r2, #4294967295
 8006336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800633a:	f10a 0a01 	add.w	sl, sl, #1
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	9307      	str	r3, [sp, #28]
 8006342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006346:	931a      	str	r3, [sp, #104]	; 0x68
 8006348:	4654      	mov	r4, sl
 800634a:	2205      	movs	r2, #5
 800634c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006350:	4851      	ldr	r0, [pc, #324]	; (8006498 <_svfiprintf_r+0x1ec>)
 8006352:	f7f9 ff4d 	bl	80001f0 <memchr>
 8006356:	9a04      	ldr	r2, [sp, #16]
 8006358:	b9d8      	cbnz	r0, 8006392 <_svfiprintf_r+0xe6>
 800635a:	06d0      	lsls	r0, r2, #27
 800635c:	bf44      	itt	mi
 800635e:	2320      	movmi	r3, #32
 8006360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006364:	0711      	lsls	r1, r2, #28
 8006366:	bf44      	itt	mi
 8006368:	232b      	movmi	r3, #43	; 0x2b
 800636a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800636e:	f89a 3000 	ldrb.w	r3, [sl]
 8006372:	2b2a      	cmp	r3, #42	; 0x2a
 8006374:	d015      	beq.n	80063a2 <_svfiprintf_r+0xf6>
 8006376:	9a07      	ldr	r2, [sp, #28]
 8006378:	4654      	mov	r4, sl
 800637a:	2000      	movs	r0, #0
 800637c:	f04f 0c0a 	mov.w	ip, #10
 8006380:	4621      	mov	r1, r4
 8006382:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006386:	3b30      	subs	r3, #48	; 0x30
 8006388:	2b09      	cmp	r3, #9
 800638a:	d94e      	bls.n	800642a <_svfiprintf_r+0x17e>
 800638c:	b1b0      	cbz	r0, 80063bc <_svfiprintf_r+0x110>
 800638e:	9207      	str	r2, [sp, #28]
 8006390:	e014      	b.n	80063bc <_svfiprintf_r+0x110>
 8006392:	eba0 0308 	sub.w	r3, r0, r8
 8006396:	fa09 f303 	lsl.w	r3, r9, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	46a2      	mov	sl, r4
 80063a0:	e7d2      	b.n	8006348 <_svfiprintf_r+0x9c>
 80063a2:	9b03      	ldr	r3, [sp, #12]
 80063a4:	1d19      	adds	r1, r3, #4
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	9103      	str	r1, [sp, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfbb      	ittet	lt
 80063ae:	425b      	neglt	r3, r3
 80063b0:	f042 0202 	orrlt.w	r2, r2, #2
 80063b4:	9307      	strge	r3, [sp, #28]
 80063b6:	9307      	strlt	r3, [sp, #28]
 80063b8:	bfb8      	it	lt
 80063ba:	9204      	strlt	r2, [sp, #16]
 80063bc:	7823      	ldrb	r3, [r4, #0]
 80063be:	2b2e      	cmp	r3, #46	; 0x2e
 80063c0:	d10c      	bne.n	80063dc <_svfiprintf_r+0x130>
 80063c2:	7863      	ldrb	r3, [r4, #1]
 80063c4:	2b2a      	cmp	r3, #42	; 0x2a
 80063c6:	d135      	bne.n	8006434 <_svfiprintf_r+0x188>
 80063c8:	9b03      	ldr	r3, [sp, #12]
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	9203      	str	r2, [sp, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bfb8      	it	lt
 80063d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80063d8:	3402      	adds	r4, #2
 80063da:	9305      	str	r3, [sp, #20]
 80063dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064a8 <_svfiprintf_r+0x1fc>
 80063e0:	7821      	ldrb	r1, [r4, #0]
 80063e2:	2203      	movs	r2, #3
 80063e4:	4650      	mov	r0, sl
 80063e6:	f7f9 ff03 	bl	80001f0 <memchr>
 80063ea:	b140      	cbz	r0, 80063fe <_svfiprintf_r+0x152>
 80063ec:	2340      	movs	r3, #64	; 0x40
 80063ee:	eba0 000a 	sub.w	r0, r0, sl
 80063f2:	fa03 f000 	lsl.w	r0, r3, r0
 80063f6:	9b04      	ldr	r3, [sp, #16]
 80063f8:	4303      	orrs	r3, r0
 80063fa:	3401      	adds	r4, #1
 80063fc:	9304      	str	r3, [sp, #16]
 80063fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006402:	4826      	ldr	r0, [pc, #152]	; (800649c <_svfiprintf_r+0x1f0>)
 8006404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006408:	2206      	movs	r2, #6
 800640a:	f7f9 fef1 	bl	80001f0 <memchr>
 800640e:	2800      	cmp	r0, #0
 8006410:	d038      	beq.n	8006484 <_svfiprintf_r+0x1d8>
 8006412:	4b23      	ldr	r3, [pc, #140]	; (80064a0 <_svfiprintf_r+0x1f4>)
 8006414:	bb1b      	cbnz	r3, 800645e <_svfiprintf_r+0x1b2>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	3307      	adds	r3, #7
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	3308      	adds	r3, #8
 8006420:	9303      	str	r3, [sp, #12]
 8006422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006424:	4433      	add	r3, r6
 8006426:	9309      	str	r3, [sp, #36]	; 0x24
 8006428:	e767      	b.n	80062fa <_svfiprintf_r+0x4e>
 800642a:	fb0c 3202 	mla	r2, ip, r2, r3
 800642e:	460c      	mov	r4, r1
 8006430:	2001      	movs	r0, #1
 8006432:	e7a5      	b.n	8006380 <_svfiprintf_r+0xd4>
 8006434:	2300      	movs	r3, #0
 8006436:	3401      	adds	r4, #1
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	4619      	mov	r1, r3
 800643c:	f04f 0c0a 	mov.w	ip, #10
 8006440:	4620      	mov	r0, r4
 8006442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006446:	3a30      	subs	r2, #48	; 0x30
 8006448:	2a09      	cmp	r2, #9
 800644a:	d903      	bls.n	8006454 <_svfiprintf_r+0x1a8>
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0c5      	beq.n	80063dc <_svfiprintf_r+0x130>
 8006450:	9105      	str	r1, [sp, #20]
 8006452:	e7c3      	b.n	80063dc <_svfiprintf_r+0x130>
 8006454:	fb0c 2101 	mla	r1, ip, r1, r2
 8006458:	4604      	mov	r4, r0
 800645a:	2301      	movs	r3, #1
 800645c:	e7f0      	b.n	8006440 <_svfiprintf_r+0x194>
 800645e:	ab03      	add	r3, sp, #12
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	462a      	mov	r2, r5
 8006464:	4b0f      	ldr	r3, [pc, #60]	; (80064a4 <_svfiprintf_r+0x1f8>)
 8006466:	a904      	add	r1, sp, #16
 8006468:	4638      	mov	r0, r7
 800646a:	f3af 8000 	nop.w
 800646e:	1c42      	adds	r2, r0, #1
 8006470:	4606      	mov	r6, r0
 8006472:	d1d6      	bne.n	8006422 <_svfiprintf_r+0x176>
 8006474:	89ab      	ldrh	r3, [r5, #12]
 8006476:	065b      	lsls	r3, r3, #25
 8006478:	f53f af2c 	bmi.w	80062d4 <_svfiprintf_r+0x28>
 800647c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800647e:	b01d      	add	sp, #116	; 0x74
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	ab03      	add	r3, sp, #12
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	462a      	mov	r2, r5
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <_svfiprintf_r+0x1f8>)
 800648c:	a904      	add	r1, sp, #16
 800648e:	4638      	mov	r0, r7
 8006490:	f000 f87a 	bl	8006588 <_printf_i>
 8006494:	e7eb      	b.n	800646e <_svfiprintf_r+0x1c2>
 8006496:	bf00      	nop
 8006498:	08006ba0 	.word	0x08006ba0
 800649c:	08006baa 	.word	0x08006baa
 80064a0:	00000000 	.word	0x00000000
 80064a4:	080061f5 	.word	0x080061f5
 80064a8:	08006ba6 	.word	0x08006ba6

080064ac <_printf_common>:
 80064ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	4616      	mov	r6, r2
 80064b2:	4699      	mov	r9, r3
 80064b4:	688a      	ldr	r2, [r1, #8]
 80064b6:	690b      	ldr	r3, [r1, #16]
 80064b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064bc:	4293      	cmp	r3, r2
 80064be:	bfb8      	it	lt
 80064c0:	4613      	movlt	r3, r2
 80064c2:	6033      	str	r3, [r6, #0]
 80064c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064c8:	4607      	mov	r7, r0
 80064ca:	460c      	mov	r4, r1
 80064cc:	b10a      	cbz	r2, 80064d2 <_printf_common+0x26>
 80064ce:	3301      	adds	r3, #1
 80064d0:	6033      	str	r3, [r6, #0]
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	0699      	lsls	r1, r3, #26
 80064d6:	bf42      	ittt	mi
 80064d8:	6833      	ldrmi	r3, [r6, #0]
 80064da:	3302      	addmi	r3, #2
 80064dc:	6033      	strmi	r3, [r6, #0]
 80064de:	6825      	ldr	r5, [r4, #0]
 80064e0:	f015 0506 	ands.w	r5, r5, #6
 80064e4:	d106      	bne.n	80064f4 <_printf_common+0x48>
 80064e6:	f104 0a19 	add.w	sl, r4, #25
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	6832      	ldr	r2, [r6, #0]
 80064ee:	1a9b      	subs	r3, r3, r2
 80064f0:	42ab      	cmp	r3, r5
 80064f2:	dc26      	bgt.n	8006542 <_printf_common+0x96>
 80064f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064f8:	1e13      	subs	r3, r2, #0
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	bf18      	it	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	0692      	lsls	r2, r2, #26
 8006502:	d42b      	bmi.n	800655c <_printf_common+0xb0>
 8006504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006508:	4649      	mov	r1, r9
 800650a:	4638      	mov	r0, r7
 800650c:	47c0      	blx	r8
 800650e:	3001      	adds	r0, #1
 8006510:	d01e      	beq.n	8006550 <_printf_common+0xa4>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	68e5      	ldr	r5, [r4, #12]
 8006516:	6832      	ldr	r2, [r6, #0]
 8006518:	f003 0306 	and.w	r3, r3, #6
 800651c:	2b04      	cmp	r3, #4
 800651e:	bf08      	it	eq
 8006520:	1aad      	subeq	r5, r5, r2
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	6922      	ldr	r2, [r4, #16]
 8006526:	bf0c      	ite	eq
 8006528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800652c:	2500      	movne	r5, #0
 800652e:	4293      	cmp	r3, r2
 8006530:	bfc4      	itt	gt
 8006532:	1a9b      	subgt	r3, r3, r2
 8006534:	18ed      	addgt	r5, r5, r3
 8006536:	2600      	movs	r6, #0
 8006538:	341a      	adds	r4, #26
 800653a:	42b5      	cmp	r5, r6
 800653c:	d11a      	bne.n	8006574 <_printf_common+0xc8>
 800653e:	2000      	movs	r0, #0
 8006540:	e008      	b.n	8006554 <_printf_common+0xa8>
 8006542:	2301      	movs	r3, #1
 8006544:	4652      	mov	r2, sl
 8006546:	4649      	mov	r1, r9
 8006548:	4638      	mov	r0, r7
 800654a:	47c0      	blx	r8
 800654c:	3001      	adds	r0, #1
 800654e:	d103      	bne.n	8006558 <_printf_common+0xac>
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006558:	3501      	adds	r5, #1
 800655a:	e7c6      	b.n	80064ea <_printf_common+0x3e>
 800655c:	18e1      	adds	r1, r4, r3
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	2030      	movs	r0, #48	; 0x30
 8006562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006566:	4422      	add	r2, r4
 8006568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800656c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006570:	3302      	adds	r3, #2
 8006572:	e7c7      	b.n	8006504 <_printf_common+0x58>
 8006574:	2301      	movs	r3, #1
 8006576:	4622      	mov	r2, r4
 8006578:	4649      	mov	r1, r9
 800657a:	4638      	mov	r0, r7
 800657c:	47c0      	blx	r8
 800657e:	3001      	adds	r0, #1
 8006580:	d0e6      	beq.n	8006550 <_printf_common+0xa4>
 8006582:	3601      	adds	r6, #1
 8006584:	e7d9      	b.n	800653a <_printf_common+0x8e>
	...

08006588 <_printf_i>:
 8006588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	7e0f      	ldrb	r7, [r1, #24]
 800658e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006590:	2f78      	cmp	r7, #120	; 0x78
 8006592:	4691      	mov	r9, r2
 8006594:	4680      	mov	r8, r0
 8006596:	460c      	mov	r4, r1
 8006598:	469a      	mov	sl, r3
 800659a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800659e:	d807      	bhi.n	80065b0 <_printf_i+0x28>
 80065a0:	2f62      	cmp	r7, #98	; 0x62
 80065a2:	d80a      	bhi.n	80065ba <_printf_i+0x32>
 80065a4:	2f00      	cmp	r7, #0
 80065a6:	f000 80d8 	beq.w	800675a <_printf_i+0x1d2>
 80065aa:	2f58      	cmp	r7, #88	; 0x58
 80065ac:	f000 80a3 	beq.w	80066f6 <_printf_i+0x16e>
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065b8:	e03a      	b.n	8006630 <_printf_i+0xa8>
 80065ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065be:	2b15      	cmp	r3, #21
 80065c0:	d8f6      	bhi.n	80065b0 <_printf_i+0x28>
 80065c2:	a101      	add	r1, pc, #4	; (adr r1, 80065c8 <_printf_i+0x40>)
 80065c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065c8:	08006621 	.word	0x08006621
 80065cc:	08006635 	.word	0x08006635
 80065d0:	080065b1 	.word	0x080065b1
 80065d4:	080065b1 	.word	0x080065b1
 80065d8:	080065b1 	.word	0x080065b1
 80065dc:	080065b1 	.word	0x080065b1
 80065e0:	08006635 	.word	0x08006635
 80065e4:	080065b1 	.word	0x080065b1
 80065e8:	080065b1 	.word	0x080065b1
 80065ec:	080065b1 	.word	0x080065b1
 80065f0:	080065b1 	.word	0x080065b1
 80065f4:	08006741 	.word	0x08006741
 80065f8:	08006665 	.word	0x08006665
 80065fc:	08006723 	.word	0x08006723
 8006600:	080065b1 	.word	0x080065b1
 8006604:	080065b1 	.word	0x080065b1
 8006608:	08006763 	.word	0x08006763
 800660c:	080065b1 	.word	0x080065b1
 8006610:	08006665 	.word	0x08006665
 8006614:	080065b1 	.word	0x080065b1
 8006618:	080065b1 	.word	0x080065b1
 800661c:	0800672b 	.word	0x0800672b
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	1d1a      	adds	r2, r3, #4
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	602a      	str	r2, [r5, #0]
 8006628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800662c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006630:	2301      	movs	r3, #1
 8006632:	e0a3      	b.n	800677c <_printf_i+0x1f4>
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	6829      	ldr	r1, [r5, #0]
 8006638:	0606      	lsls	r6, r0, #24
 800663a:	f101 0304 	add.w	r3, r1, #4
 800663e:	d50a      	bpl.n	8006656 <_printf_i+0xce>
 8006640:	680e      	ldr	r6, [r1, #0]
 8006642:	602b      	str	r3, [r5, #0]
 8006644:	2e00      	cmp	r6, #0
 8006646:	da03      	bge.n	8006650 <_printf_i+0xc8>
 8006648:	232d      	movs	r3, #45	; 0x2d
 800664a:	4276      	negs	r6, r6
 800664c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006650:	485e      	ldr	r0, [pc, #376]	; (80067cc <_printf_i+0x244>)
 8006652:	230a      	movs	r3, #10
 8006654:	e019      	b.n	800668a <_printf_i+0x102>
 8006656:	680e      	ldr	r6, [r1, #0]
 8006658:	602b      	str	r3, [r5, #0]
 800665a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800665e:	bf18      	it	ne
 8006660:	b236      	sxthne	r6, r6
 8006662:	e7ef      	b.n	8006644 <_printf_i+0xbc>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	6820      	ldr	r0, [r4, #0]
 8006668:	1d19      	adds	r1, r3, #4
 800666a:	6029      	str	r1, [r5, #0]
 800666c:	0601      	lsls	r1, r0, #24
 800666e:	d501      	bpl.n	8006674 <_printf_i+0xec>
 8006670:	681e      	ldr	r6, [r3, #0]
 8006672:	e002      	b.n	800667a <_printf_i+0xf2>
 8006674:	0646      	lsls	r6, r0, #25
 8006676:	d5fb      	bpl.n	8006670 <_printf_i+0xe8>
 8006678:	881e      	ldrh	r6, [r3, #0]
 800667a:	4854      	ldr	r0, [pc, #336]	; (80067cc <_printf_i+0x244>)
 800667c:	2f6f      	cmp	r7, #111	; 0x6f
 800667e:	bf0c      	ite	eq
 8006680:	2308      	moveq	r3, #8
 8006682:	230a      	movne	r3, #10
 8006684:	2100      	movs	r1, #0
 8006686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800668a:	6865      	ldr	r5, [r4, #4]
 800668c:	60a5      	str	r5, [r4, #8]
 800668e:	2d00      	cmp	r5, #0
 8006690:	bfa2      	ittt	ge
 8006692:	6821      	ldrge	r1, [r4, #0]
 8006694:	f021 0104 	bicge.w	r1, r1, #4
 8006698:	6021      	strge	r1, [r4, #0]
 800669a:	b90e      	cbnz	r6, 80066a0 <_printf_i+0x118>
 800669c:	2d00      	cmp	r5, #0
 800669e:	d04d      	beq.n	800673c <_printf_i+0x1b4>
 80066a0:	4615      	mov	r5, r2
 80066a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80066a6:	fb03 6711 	mls	r7, r3, r1, r6
 80066aa:	5dc7      	ldrb	r7, [r0, r7]
 80066ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80066b0:	4637      	mov	r7, r6
 80066b2:	42bb      	cmp	r3, r7
 80066b4:	460e      	mov	r6, r1
 80066b6:	d9f4      	bls.n	80066a2 <_printf_i+0x11a>
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d10b      	bne.n	80066d4 <_printf_i+0x14c>
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	07de      	lsls	r6, r3, #31
 80066c0:	d508      	bpl.n	80066d4 <_printf_i+0x14c>
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6861      	ldr	r1, [r4, #4]
 80066c6:	4299      	cmp	r1, r3
 80066c8:	bfde      	ittt	le
 80066ca:	2330      	movle	r3, #48	; 0x30
 80066cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80066d4:	1b52      	subs	r2, r2, r5
 80066d6:	6122      	str	r2, [r4, #16]
 80066d8:	f8cd a000 	str.w	sl, [sp]
 80066dc:	464b      	mov	r3, r9
 80066de:	aa03      	add	r2, sp, #12
 80066e0:	4621      	mov	r1, r4
 80066e2:	4640      	mov	r0, r8
 80066e4:	f7ff fee2 	bl	80064ac <_printf_common>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d14c      	bne.n	8006786 <_printf_i+0x1fe>
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	b004      	add	sp, #16
 80066f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066f6:	4835      	ldr	r0, [pc, #212]	; (80067cc <_printf_i+0x244>)
 80066f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80066fc:	6829      	ldr	r1, [r5, #0]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	f851 6b04 	ldr.w	r6, [r1], #4
 8006704:	6029      	str	r1, [r5, #0]
 8006706:	061d      	lsls	r5, r3, #24
 8006708:	d514      	bpl.n	8006734 <_printf_i+0x1ac>
 800670a:	07df      	lsls	r7, r3, #31
 800670c:	bf44      	itt	mi
 800670e:	f043 0320 	orrmi.w	r3, r3, #32
 8006712:	6023      	strmi	r3, [r4, #0]
 8006714:	b91e      	cbnz	r6, 800671e <_printf_i+0x196>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f023 0320 	bic.w	r3, r3, #32
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	2310      	movs	r3, #16
 8006720:	e7b0      	b.n	8006684 <_printf_i+0xfc>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f043 0320 	orr.w	r3, r3, #32
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	2378      	movs	r3, #120	; 0x78
 800672c:	4828      	ldr	r0, [pc, #160]	; (80067d0 <_printf_i+0x248>)
 800672e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006732:	e7e3      	b.n	80066fc <_printf_i+0x174>
 8006734:	0659      	lsls	r1, r3, #25
 8006736:	bf48      	it	mi
 8006738:	b2b6      	uxthmi	r6, r6
 800673a:	e7e6      	b.n	800670a <_printf_i+0x182>
 800673c:	4615      	mov	r5, r2
 800673e:	e7bb      	b.n	80066b8 <_printf_i+0x130>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	6826      	ldr	r6, [r4, #0]
 8006744:	6961      	ldr	r1, [r4, #20]
 8006746:	1d18      	adds	r0, r3, #4
 8006748:	6028      	str	r0, [r5, #0]
 800674a:	0635      	lsls	r5, r6, #24
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	d501      	bpl.n	8006754 <_printf_i+0x1cc>
 8006750:	6019      	str	r1, [r3, #0]
 8006752:	e002      	b.n	800675a <_printf_i+0x1d2>
 8006754:	0670      	lsls	r0, r6, #25
 8006756:	d5fb      	bpl.n	8006750 <_printf_i+0x1c8>
 8006758:	8019      	strh	r1, [r3, #0]
 800675a:	2300      	movs	r3, #0
 800675c:	6123      	str	r3, [r4, #16]
 800675e:	4615      	mov	r5, r2
 8006760:	e7ba      	b.n	80066d8 <_printf_i+0x150>
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	1d1a      	adds	r2, r3, #4
 8006766:	602a      	str	r2, [r5, #0]
 8006768:	681d      	ldr	r5, [r3, #0]
 800676a:	6862      	ldr	r2, [r4, #4]
 800676c:	2100      	movs	r1, #0
 800676e:	4628      	mov	r0, r5
 8006770:	f7f9 fd3e 	bl	80001f0 <memchr>
 8006774:	b108      	cbz	r0, 800677a <_printf_i+0x1f2>
 8006776:	1b40      	subs	r0, r0, r5
 8006778:	6060      	str	r0, [r4, #4]
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	6123      	str	r3, [r4, #16]
 800677e:	2300      	movs	r3, #0
 8006780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006784:	e7a8      	b.n	80066d8 <_printf_i+0x150>
 8006786:	6923      	ldr	r3, [r4, #16]
 8006788:	462a      	mov	r2, r5
 800678a:	4649      	mov	r1, r9
 800678c:	4640      	mov	r0, r8
 800678e:	47d0      	blx	sl
 8006790:	3001      	adds	r0, #1
 8006792:	d0ab      	beq.n	80066ec <_printf_i+0x164>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	079b      	lsls	r3, r3, #30
 8006798:	d413      	bmi.n	80067c2 <_printf_i+0x23a>
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	4298      	cmp	r0, r3
 80067a0:	bfb8      	it	lt
 80067a2:	4618      	movlt	r0, r3
 80067a4:	e7a4      	b.n	80066f0 <_printf_i+0x168>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4632      	mov	r2, r6
 80067aa:	4649      	mov	r1, r9
 80067ac:	4640      	mov	r0, r8
 80067ae:	47d0      	blx	sl
 80067b0:	3001      	adds	r0, #1
 80067b2:	d09b      	beq.n	80066ec <_printf_i+0x164>
 80067b4:	3501      	adds	r5, #1
 80067b6:	68e3      	ldr	r3, [r4, #12]
 80067b8:	9903      	ldr	r1, [sp, #12]
 80067ba:	1a5b      	subs	r3, r3, r1
 80067bc:	42ab      	cmp	r3, r5
 80067be:	dcf2      	bgt.n	80067a6 <_printf_i+0x21e>
 80067c0:	e7eb      	b.n	800679a <_printf_i+0x212>
 80067c2:	2500      	movs	r5, #0
 80067c4:	f104 0619 	add.w	r6, r4, #25
 80067c8:	e7f5      	b.n	80067b6 <_printf_i+0x22e>
 80067ca:	bf00      	nop
 80067cc:	08006bb1 	.word	0x08006bb1
 80067d0:	08006bc2 	.word	0x08006bc2

080067d4 <memcpy>:
 80067d4:	440a      	add	r2, r1
 80067d6:	4291      	cmp	r1, r2
 80067d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80067dc:	d100      	bne.n	80067e0 <memcpy+0xc>
 80067de:	4770      	bx	lr
 80067e0:	b510      	push	{r4, lr}
 80067e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ea:	4291      	cmp	r1, r2
 80067ec:	d1f9      	bne.n	80067e2 <memcpy+0xe>
 80067ee:	bd10      	pop	{r4, pc}

080067f0 <memmove>:
 80067f0:	4288      	cmp	r0, r1
 80067f2:	b510      	push	{r4, lr}
 80067f4:	eb01 0402 	add.w	r4, r1, r2
 80067f8:	d902      	bls.n	8006800 <memmove+0x10>
 80067fa:	4284      	cmp	r4, r0
 80067fc:	4623      	mov	r3, r4
 80067fe:	d807      	bhi.n	8006810 <memmove+0x20>
 8006800:	1e43      	subs	r3, r0, #1
 8006802:	42a1      	cmp	r1, r4
 8006804:	d008      	beq.n	8006818 <memmove+0x28>
 8006806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800680a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800680e:	e7f8      	b.n	8006802 <memmove+0x12>
 8006810:	4402      	add	r2, r0
 8006812:	4601      	mov	r1, r0
 8006814:	428a      	cmp	r2, r1
 8006816:	d100      	bne.n	800681a <memmove+0x2a>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800681e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006822:	e7f7      	b.n	8006814 <memmove+0x24>

08006824 <_free_r>:
 8006824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006826:	2900      	cmp	r1, #0
 8006828:	d044      	beq.n	80068b4 <_free_r+0x90>
 800682a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800682e:	9001      	str	r0, [sp, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	f1a1 0404 	sub.w	r4, r1, #4
 8006836:	bfb8      	it	lt
 8006838:	18e4      	addlt	r4, r4, r3
 800683a:	f000 f913 	bl	8006a64 <__malloc_lock>
 800683e:	4a1e      	ldr	r2, [pc, #120]	; (80068b8 <_free_r+0x94>)
 8006840:	9801      	ldr	r0, [sp, #4]
 8006842:	6813      	ldr	r3, [r2, #0]
 8006844:	b933      	cbnz	r3, 8006854 <_free_r+0x30>
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	6014      	str	r4, [r2, #0]
 800684a:	b003      	add	sp, #12
 800684c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006850:	f000 b90e 	b.w	8006a70 <__malloc_unlock>
 8006854:	42a3      	cmp	r3, r4
 8006856:	d908      	bls.n	800686a <_free_r+0x46>
 8006858:	6825      	ldr	r5, [r4, #0]
 800685a:	1961      	adds	r1, r4, r5
 800685c:	428b      	cmp	r3, r1
 800685e:	bf01      	itttt	eq
 8006860:	6819      	ldreq	r1, [r3, #0]
 8006862:	685b      	ldreq	r3, [r3, #4]
 8006864:	1949      	addeq	r1, r1, r5
 8006866:	6021      	streq	r1, [r4, #0]
 8006868:	e7ed      	b.n	8006846 <_free_r+0x22>
 800686a:	461a      	mov	r2, r3
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	b10b      	cbz	r3, 8006874 <_free_r+0x50>
 8006870:	42a3      	cmp	r3, r4
 8006872:	d9fa      	bls.n	800686a <_free_r+0x46>
 8006874:	6811      	ldr	r1, [r2, #0]
 8006876:	1855      	adds	r5, r2, r1
 8006878:	42a5      	cmp	r5, r4
 800687a:	d10b      	bne.n	8006894 <_free_r+0x70>
 800687c:	6824      	ldr	r4, [r4, #0]
 800687e:	4421      	add	r1, r4
 8006880:	1854      	adds	r4, r2, r1
 8006882:	42a3      	cmp	r3, r4
 8006884:	6011      	str	r1, [r2, #0]
 8006886:	d1e0      	bne.n	800684a <_free_r+0x26>
 8006888:	681c      	ldr	r4, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	6053      	str	r3, [r2, #4]
 800688e:	4421      	add	r1, r4
 8006890:	6011      	str	r1, [r2, #0]
 8006892:	e7da      	b.n	800684a <_free_r+0x26>
 8006894:	d902      	bls.n	800689c <_free_r+0x78>
 8006896:	230c      	movs	r3, #12
 8006898:	6003      	str	r3, [r0, #0]
 800689a:	e7d6      	b.n	800684a <_free_r+0x26>
 800689c:	6825      	ldr	r5, [r4, #0]
 800689e:	1961      	adds	r1, r4, r5
 80068a0:	428b      	cmp	r3, r1
 80068a2:	bf04      	itt	eq
 80068a4:	6819      	ldreq	r1, [r3, #0]
 80068a6:	685b      	ldreq	r3, [r3, #4]
 80068a8:	6063      	str	r3, [r4, #4]
 80068aa:	bf04      	itt	eq
 80068ac:	1949      	addeq	r1, r1, r5
 80068ae:	6021      	streq	r1, [r4, #0]
 80068b0:	6054      	str	r4, [r2, #4]
 80068b2:	e7ca      	b.n	800684a <_free_r+0x26>
 80068b4:	b003      	add	sp, #12
 80068b6:	bd30      	pop	{r4, r5, pc}
 80068b8:	200002ac 	.word	0x200002ac

080068bc <sbrk_aligned>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	4e0e      	ldr	r6, [pc, #56]	; (80068f8 <sbrk_aligned+0x3c>)
 80068c0:	460c      	mov	r4, r1
 80068c2:	6831      	ldr	r1, [r6, #0]
 80068c4:	4605      	mov	r5, r0
 80068c6:	b911      	cbnz	r1, 80068ce <sbrk_aligned+0x12>
 80068c8:	f000 f8bc 	bl	8006a44 <_sbrk_r>
 80068cc:	6030      	str	r0, [r6, #0]
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f000 f8b7 	bl	8006a44 <_sbrk_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d00a      	beq.n	80068f0 <sbrk_aligned+0x34>
 80068da:	1cc4      	adds	r4, r0, #3
 80068dc:	f024 0403 	bic.w	r4, r4, #3
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d007      	beq.n	80068f4 <sbrk_aligned+0x38>
 80068e4:	1a21      	subs	r1, r4, r0
 80068e6:	4628      	mov	r0, r5
 80068e8:	f000 f8ac 	bl	8006a44 <_sbrk_r>
 80068ec:	3001      	adds	r0, #1
 80068ee:	d101      	bne.n	80068f4 <sbrk_aligned+0x38>
 80068f0:	f04f 34ff 	mov.w	r4, #4294967295
 80068f4:	4620      	mov	r0, r4
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	200002b0 	.word	0x200002b0

080068fc <_malloc_r>:
 80068fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006900:	1ccd      	adds	r5, r1, #3
 8006902:	f025 0503 	bic.w	r5, r5, #3
 8006906:	3508      	adds	r5, #8
 8006908:	2d0c      	cmp	r5, #12
 800690a:	bf38      	it	cc
 800690c:	250c      	movcc	r5, #12
 800690e:	2d00      	cmp	r5, #0
 8006910:	4607      	mov	r7, r0
 8006912:	db01      	blt.n	8006918 <_malloc_r+0x1c>
 8006914:	42a9      	cmp	r1, r5
 8006916:	d905      	bls.n	8006924 <_malloc_r+0x28>
 8006918:	230c      	movs	r3, #12
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	2600      	movs	r6, #0
 800691e:	4630      	mov	r0, r6
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006924:	4e2e      	ldr	r6, [pc, #184]	; (80069e0 <_malloc_r+0xe4>)
 8006926:	f000 f89d 	bl	8006a64 <__malloc_lock>
 800692a:	6833      	ldr	r3, [r6, #0]
 800692c:	461c      	mov	r4, r3
 800692e:	bb34      	cbnz	r4, 800697e <_malloc_r+0x82>
 8006930:	4629      	mov	r1, r5
 8006932:	4638      	mov	r0, r7
 8006934:	f7ff ffc2 	bl	80068bc <sbrk_aligned>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	4604      	mov	r4, r0
 800693c:	d14d      	bne.n	80069da <_malloc_r+0xde>
 800693e:	6834      	ldr	r4, [r6, #0]
 8006940:	4626      	mov	r6, r4
 8006942:	2e00      	cmp	r6, #0
 8006944:	d140      	bne.n	80069c8 <_malloc_r+0xcc>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	4631      	mov	r1, r6
 800694a:	4638      	mov	r0, r7
 800694c:	eb04 0803 	add.w	r8, r4, r3
 8006950:	f000 f878 	bl	8006a44 <_sbrk_r>
 8006954:	4580      	cmp	r8, r0
 8006956:	d13a      	bne.n	80069ce <_malloc_r+0xd2>
 8006958:	6821      	ldr	r1, [r4, #0]
 800695a:	3503      	adds	r5, #3
 800695c:	1a6d      	subs	r5, r5, r1
 800695e:	f025 0503 	bic.w	r5, r5, #3
 8006962:	3508      	adds	r5, #8
 8006964:	2d0c      	cmp	r5, #12
 8006966:	bf38      	it	cc
 8006968:	250c      	movcc	r5, #12
 800696a:	4629      	mov	r1, r5
 800696c:	4638      	mov	r0, r7
 800696e:	f7ff ffa5 	bl	80068bc <sbrk_aligned>
 8006972:	3001      	adds	r0, #1
 8006974:	d02b      	beq.n	80069ce <_malloc_r+0xd2>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	442b      	add	r3, r5
 800697a:	6023      	str	r3, [r4, #0]
 800697c:	e00e      	b.n	800699c <_malloc_r+0xa0>
 800697e:	6822      	ldr	r2, [r4, #0]
 8006980:	1b52      	subs	r2, r2, r5
 8006982:	d41e      	bmi.n	80069c2 <_malloc_r+0xc6>
 8006984:	2a0b      	cmp	r2, #11
 8006986:	d916      	bls.n	80069b6 <_malloc_r+0xba>
 8006988:	1961      	adds	r1, r4, r5
 800698a:	42a3      	cmp	r3, r4
 800698c:	6025      	str	r5, [r4, #0]
 800698e:	bf18      	it	ne
 8006990:	6059      	strne	r1, [r3, #4]
 8006992:	6863      	ldr	r3, [r4, #4]
 8006994:	bf08      	it	eq
 8006996:	6031      	streq	r1, [r6, #0]
 8006998:	5162      	str	r2, [r4, r5]
 800699a:	604b      	str	r3, [r1, #4]
 800699c:	4638      	mov	r0, r7
 800699e:	f104 060b 	add.w	r6, r4, #11
 80069a2:	f000 f865 	bl	8006a70 <__malloc_unlock>
 80069a6:	f026 0607 	bic.w	r6, r6, #7
 80069aa:	1d23      	adds	r3, r4, #4
 80069ac:	1af2      	subs	r2, r6, r3
 80069ae:	d0b6      	beq.n	800691e <_malloc_r+0x22>
 80069b0:	1b9b      	subs	r3, r3, r6
 80069b2:	50a3      	str	r3, [r4, r2]
 80069b4:	e7b3      	b.n	800691e <_malloc_r+0x22>
 80069b6:	6862      	ldr	r2, [r4, #4]
 80069b8:	42a3      	cmp	r3, r4
 80069ba:	bf0c      	ite	eq
 80069bc:	6032      	streq	r2, [r6, #0]
 80069be:	605a      	strne	r2, [r3, #4]
 80069c0:	e7ec      	b.n	800699c <_malloc_r+0xa0>
 80069c2:	4623      	mov	r3, r4
 80069c4:	6864      	ldr	r4, [r4, #4]
 80069c6:	e7b2      	b.n	800692e <_malloc_r+0x32>
 80069c8:	4634      	mov	r4, r6
 80069ca:	6876      	ldr	r6, [r6, #4]
 80069cc:	e7b9      	b.n	8006942 <_malloc_r+0x46>
 80069ce:	230c      	movs	r3, #12
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4638      	mov	r0, r7
 80069d4:	f000 f84c 	bl	8006a70 <__malloc_unlock>
 80069d8:	e7a1      	b.n	800691e <_malloc_r+0x22>
 80069da:	6025      	str	r5, [r4, #0]
 80069dc:	e7de      	b.n	800699c <_malloc_r+0xa0>
 80069de:	bf00      	nop
 80069e0:	200002ac 	.word	0x200002ac

080069e4 <_realloc_r>:
 80069e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e8:	4680      	mov	r8, r0
 80069ea:	4614      	mov	r4, r2
 80069ec:	460e      	mov	r6, r1
 80069ee:	b921      	cbnz	r1, 80069fa <_realloc_r+0x16>
 80069f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069f4:	4611      	mov	r1, r2
 80069f6:	f7ff bf81 	b.w	80068fc <_malloc_r>
 80069fa:	b92a      	cbnz	r2, 8006a08 <_realloc_r+0x24>
 80069fc:	f7ff ff12 	bl	8006824 <_free_r>
 8006a00:	4625      	mov	r5, r4
 8006a02:	4628      	mov	r0, r5
 8006a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a08:	f000 f838 	bl	8006a7c <_malloc_usable_size_r>
 8006a0c:	4284      	cmp	r4, r0
 8006a0e:	4607      	mov	r7, r0
 8006a10:	d802      	bhi.n	8006a18 <_realloc_r+0x34>
 8006a12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a16:	d812      	bhi.n	8006a3e <_realloc_r+0x5a>
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	f7ff ff6e 	bl	80068fc <_malloc_r>
 8006a20:	4605      	mov	r5, r0
 8006a22:	2800      	cmp	r0, #0
 8006a24:	d0ed      	beq.n	8006a02 <_realloc_r+0x1e>
 8006a26:	42bc      	cmp	r4, r7
 8006a28:	4622      	mov	r2, r4
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	bf28      	it	cs
 8006a2e:	463a      	movcs	r2, r7
 8006a30:	f7ff fed0 	bl	80067d4 <memcpy>
 8006a34:	4631      	mov	r1, r6
 8006a36:	4640      	mov	r0, r8
 8006a38:	f7ff fef4 	bl	8006824 <_free_r>
 8006a3c:	e7e1      	b.n	8006a02 <_realloc_r+0x1e>
 8006a3e:	4635      	mov	r5, r6
 8006a40:	e7df      	b.n	8006a02 <_realloc_r+0x1e>
	...

08006a44 <_sbrk_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d06      	ldr	r5, [pc, #24]	; (8006a60 <_sbrk_r+0x1c>)
 8006a48:	2300      	movs	r3, #0
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fb fa26 	bl	8001ea0 <_sbrk>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_sbrk_r+0x1a>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_sbrk_r+0x1a>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	200002b4 	.word	0x200002b4

08006a64 <__malloc_lock>:
 8006a64:	4801      	ldr	r0, [pc, #4]	; (8006a6c <__malloc_lock+0x8>)
 8006a66:	f000 b811 	b.w	8006a8c <__retarget_lock_acquire_recursive>
 8006a6a:	bf00      	nop
 8006a6c:	200002b8 	.word	0x200002b8

08006a70 <__malloc_unlock>:
 8006a70:	4801      	ldr	r0, [pc, #4]	; (8006a78 <__malloc_unlock+0x8>)
 8006a72:	f000 b80c 	b.w	8006a8e <__retarget_lock_release_recursive>
 8006a76:	bf00      	nop
 8006a78:	200002b8 	.word	0x200002b8

08006a7c <_malloc_usable_size_r>:
 8006a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a80:	1f18      	subs	r0, r3, #4
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bfbc      	itt	lt
 8006a86:	580b      	ldrlt	r3, [r1, r0]
 8006a88:	18c0      	addlt	r0, r0, r3
 8006a8a:	4770      	bx	lr

08006a8c <__retarget_lock_acquire_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__retarget_lock_release_recursive>:
 8006a8e:	4770      	bx	lr

08006a90 <_init>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	bf00      	nop
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr

08006a9c <_fini>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr
